grammar io.deniffel.dsl.useCase.UseCase with org.eclipse.xtext.common.Terminals

generate useCase "http://www.deniffel.io/dsl/useCase/UseCase"

Model:
	('Firma'|'Company')company = QualifiedName
	package = Package
	(useCases+=UseCase)*
	types=UsedTypes
	exceptions=UsedExceptions;
	
	QualifiedName:
    	ID ('.' ID)*;
    
	QualifiedNumber:
		INT ('.' INT)*'.';

Package:
	(
		'Kathegorie' | 
		'package'
	)parts+=PackagePart ('>' parts+=PackagePart)*;

PackagePart:
	name = ID;

UseCase:
	(
		('use-case') | 
		('Rezept')
	) name=STRING
	(descriptions+=Description)?
	(allowedUserGroups+=AllowedUserGroups)?
	(inputs+=Inputs)?
	(optionalInputs+=OptionalInputs)?
	(outputs+=Outputs)?
	(preconditions=PreConditions)?
	(steps+=Steps)?
	(notes+=Notes)?
	(
		('end' 'of' 'use-case') |
		('Ende' 'des' 'Rezpets')
	);

	Description:
		(
			('description:') |
			('Kurzbeschreibung:') |
			('Beschreibung')
		) name=STRING;
		
		
	AllowedUserGroups:
		(
			('allowed-usergroups:') |
			('Erlaubt' 'für:')
		)
		(groups+=AllowedUserGroup )*;
	  
	AllowedUserGroup:
		(many?='many')? '-' name=STRING ('as' type=[Type])?;
	
	Inputs:
		(
			('requires:'|'require:'|'requires' 'the' 'following' 'input' ':') |
			('Benötigte' 'Zutaten' ':')
		)
		(inputs+=Input)*;
		
	OptionalInputs:
		(
			('optional:' | 'optional' 'inputs' ':') |
			(('Optionale' 'Zutaten' | 'Optional') ':')
		)
		(inputs+=Input)*;
		
	Input:
		(many?='many')? '-' (optional=Optional)? content=STRING 
			(('as' | 'als') type=[Type])? 
			('(' ('e.g' | 'z.B.') example=STRING ')')?;
	
	Outputs:
		(
			('produces:'|'produce:'|'produces' 'the' 'following' 'output' ':') |
			('Ergebnis:')
		)
		(outputs+=Output)*;
	
	Output:
		(many?='many')? '-' content=STRING (('as'|'als') type=[Type])? ('(' ('e.g'|'z.B.') example=STRING ')')?;
		
	Optional:
		'optional';
    
	
	PreConditions:
		(
			('pre-condition:'|'pre-conditions:') |
			('Vorbedingungen:')
		)
		(conditions+=Condition)*;
	
	Condition:
		'-' content=STRING;
	
	Steps:
		(
			('steps:') | 
			('Schritte:')
		) (steps+=Step)*;
	Step:
		number=QualifiedNumber (action=STRING(error=RaiseErrorConditional)? | 
			   error=RaiseErrorConditional | 
			   condition=IfStatement | 
			   loop=Loop | 
			   exception=RaiseErrorNow
		);
	
	RaiseErrorConditional:
		('.'|':') (
			'On' 'error' 'raise' | 
			'Bei' 'Fehler' 'melde' 
		) exception=Exception;
	
	RaiseErrorNow:
		('Raise' ('error')? | 'Melde' ('Fehler')?) exception=Exception;
	
	IfStatement:
		('If' | 'Falls') condition=BooleanCondition ':';
		
	Loop:
		('Solange' | 'While') condition=BooleanCondition ':';
	
	BooleanCondition:
		name=STRING;
	
	Notes:
		(
			('notes:'|'note:') |
			('Anmerkungen:'|'Anmerkung:')
		) content=STRING;


UsedTypes: 
	(
		('used' 'building-blocks:') | 
		('Genutzte' 'Bausteine:')
	) (types+=Type)*;

	Type:
	    '-' name=ID ('('description=STRING')')? ('['importInfo=QualifiedName']' )?;

UsedExceptions:
	(
		('used' 'errors:') |
		('Genutzte' 'Fehler:')
	) (exceptions+=ExceptionDecleration)*;

	Exception:
		type=[ExceptionDecleration];

	ExceptionDecleration: 
		'-' name=ID ('('message=STRING')')? ('['importInfo=QualifiedName']' )?;
