/*
 * generated by Xtext 2.13.0
 */
grammar InternalUseCase;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package io.deniffel.dsl.useCase.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package io.deniffel.dsl.useCase.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import io.deniffel.dsl.useCase.services.UseCaseGrammarAccess;

}

@parser::members {

 	private UseCaseGrammarAccess grammarAccess;

    public InternalUseCaseParser(TokenStream input, UseCaseGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected UseCaseGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getUseCasesUseCaseParserRuleCall_0_0());
				}
				lv_useCases_0_0=ruleUseCase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"useCases",
						lv_useCases_0_0,
						"io.deniffel.dsl.useCase.UseCase.UseCase");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getTypesTypeParserRuleCall_1_0());
				}
				lv_types_1_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"types",
						lv_types_1_0,
						"io.deniffel.dsl.useCase.UseCase.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getExceptionDeclerationsExceptionDeclerationParserRuleCall_2_0());
				}
				lv_exceptionDeclerations_2_0=ruleExceptionDecleration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"exceptionDeclerations",
						lv_exceptionDeclerations_2_0,
						"io.deniffel.dsl.useCase.UseCase.ExceptionDecleration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleUseCase
entryRuleUseCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUseCaseRule()); }
	iv_ruleUseCase=ruleUseCase
	{ $current=$iv_ruleUseCase.current; }
	EOF;

// Rule UseCase
ruleUseCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='use-case'
		{
			newLeafNode(otherlv_0, grammarAccess.getUseCaseAccess().getUseCaseKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getUseCaseAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUseCaseRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUseCaseAccess().getDescriptionsDescriptionParserRuleCall_2_0());
				}
				lv_descriptions_2_0=ruleDescription
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUseCaseRule());
					}
					add(
						$current,
						"descriptions",
						lv_descriptions_2_0,
						"io.deniffel.dsl.useCase.UseCase.Description");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getUseCaseAccess().getAllowedUserGroupsAllowedUserGroupsParserRuleCall_3_0());
				}
				lv_allowedUserGroups_3_0=ruleAllowedUserGroups
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUseCaseRule());
					}
					add(
						$current,
						"allowedUserGroups",
						lv_allowedUserGroups_3_0,
						"io.deniffel.dsl.useCase.UseCase.AllowedUserGroups");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getUseCaseAccess().getInputsInputsParserRuleCall_4_0());
				}
				lv_inputs_4_0=ruleInputs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUseCaseRule());
					}
					add(
						$current,
						"inputs",
						lv_inputs_4_0,
						"io.deniffel.dsl.useCase.UseCase.Inputs");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getUseCaseAccess().getOutputsOutputsParserRuleCall_5_0());
				}
				lv_outputs_5_0=ruleOutputs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUseCaseRule());
					}
					add(
						$current,
						"outputs",
						lv_outputs_5_0,
						"io.deniffel.dsl.useCase.UseCase.Outputs");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getUseCaseAccess().getStepsStepsParserRuleCall_6_0());
				}
				lv_steps_6_0=ruleSteps
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUseCaseRule());
					}
					add(
						$current,
						"steps",
						lv_steps_6_0,
						"io.deniffel.dsl.useCase.UseCase.Steps");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getUseCaseAccess().getNotesNotesParserRuleCall_7_0());
				}
				lv_notes_7_0=ruleNotes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUseCaseRule());
					}
					add(
						$current,
						"notes",
						lv_notes_7_0,
						"io.deniffel.dsl.useCase.UseCase.Notes");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_8='end'
		{
			newLeafNode(otherlv_8, grammarAccess.getUseCaseAccess().getEndKeyword_8());
		}
		otherlv_9='of'
		{
			newLeafNode(otherlv_9, grammarAccess.getUseCaseAccess().getOfKeyword_9());
		}
		otherlv_10='use-case'
		{
			newLeafNode(otherlv_10, grammarAccess.getUseCaseAccess().getUseCaseKeyword_10());
		}
	)
;

// Entry rule entryRuleSteps
entryRuleSteps returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStepsRule()); }
	iv_ruleSteps=ruleSteps
	{ $current=$iv_ruleSteps.current; }
	EOF;

// Rule Steps
ruleSteps returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='steps:'
		{
			newLeafNode(otherlv_0, grammarAccess.getStepsAccess().getStepsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStepsAccess().getStepsStepParserRuleCall_1_0());
				}
				lv_steps_1_0=ruleStep
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStepsRule());
					}
					add(
						$current,
						"steps",
						lv_steps_1_0,
						"io.deniffel.dsl.useCase.UseCase.Step");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleStep
entryRuleStep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStepRule()); }
	iv_ruleStep=ruleStep
	{ $current=$iv_ruleStep.current; }
	EOF;

// Rule Step
ruleStep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStepAccess().getNumberQualifiedNumberParserRuleCall_0_0());
				}
				lv_number_0_0=ruleQualifiedNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStepRule());
					}
					set(
						$current,
						"number",
						lv_number_0_0,
						"io.deniffel.dsl.useCase.UseCase.QualifiedNumber");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_action_1_0=RULE_STRING
				{
					newLeafNode(lv_action_1_0, grammarAccess.getStepAccess().getActionSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStepRule());
					}
					setWithLastConsumed(
						$current,
						"action",
						lv_action_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStepAccess().getErrorRaiseErrorParserRuleCall_2_0());
				}
				lv_error_2_0=ruleRaiseError
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStepRule());
					}
					set(
						$current,
						"error",
						lv_error_2_0,
						"io.deniffel.dsl.useCase.UseCase.RaiseError");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleRaiseError
entryRuleRaiseError returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRaiseErrorRule()); }
	iv_ruleRaiseError=ruleRaiseError
	{ $current=$iv_ruleRaiseError.current; }
	EOF;

// Rule RaiseError
ruleRaiseError returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='.'
		{
			newLeafNode(otherlv_0, grammarAccess.getRaiseErrorAccess().getFullStopKeyword_0());
		}
		(
			otherlv_1='Raise'
			{
				newLeafNode(otherlv_1, grammarAccess.getRaiseErrorAccess().getRaiseKeyword_1_0());
			}
			    |
			(
				otherlv_2='On'
				{
					newLeafNode(otherlv_2, grammarAccess.getRaiseErrorAccess().getOnKeyword_1_1_0());
				}
				otherlv_3='error'
				{
					newLeafNode(otherlv_3, grammarAccess.getRaiseErrorAccess().getErrorKeyword_1_1_1());
				}
				otherlv_4='raise'
				{
					newLeafNode(otherlv_4, grammarAccess.getRaiseErrorAccess().getRaiseKeyword_1_1_2());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRaiseErrorAccess().getExceptionExceptionParserRuleCall_2_0());
				}
				lv_exception_5_0=ruleException
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRaiseErrorRule());
					}
					set(
						$current,
						"exception",
						lv_exception_5_0,
						"io.deniffel.dsl.useCase.UseCase.Exception");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleException
entryRuleException returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExceptionRule()); }
	iv_ruleException=ruleException
	{ $current=$iv_ruleException.current; }
	EOF;

// Rule Exception
ruleException returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getExceptionRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getExceptionAccess().getTypeExceptionDeclerationCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleDescription
entryRuleDescription returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDescriptionRule()); }
	iv_ruleDescription=ruleDescription
	{ $current=$iv_ruleDescription.current; }
	EOF;

// Rule Description
ruleDescription returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='description:'
		{
			newLeafNode(otherlv_0, grammarAccess.getDescriptionAccess().getDescriptionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDescriptionAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDescriptionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleNotes
entryRuleNotes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotesRule()); }
	iv_ruleNotes=ruleNotes
	{ $current=$iv_ruleNotes.current; }
	EOF;

// Rule Notes
ruleNotes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='notes:'
			{
				newLeafNode(otherlv_0, grammarAccess.getNotesAccess().getNotesKeyword_0_0());
			}
			    |
			otherlv_1='note:'
			{
				newLeafNode(otherlv_1, grammarAccess.getNotesAccess().getNoteKeyword_0_1());
			}
		)
		(
			(
				lv_content_2_0=RULE_STRING
				{
					newLeafNode(lv_content_2_0, grammarAccess.getNotesAccess().getContentSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNotesRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleInputs
entryRuleInputs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputsRule()); }
	iv_ruleInputs=ruleInputs
	{ $current=$iv_ruleInputs.current; }
	EOF;

// Rule Inputs
ruleInputs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='requires:'
			{
				newLeafNode(otherlv_0, grammarAccess.getInputsAccess().getRequiresKeyword_0_0());
			}
			    |
			otherlv_1='require:'
			{
				newLeafNode(otherlv_1, grammarAccess.getInputsAccess().getRequireKeyword_0_1());
			}
			    |
			(
				otherlv_2='requires'
				{
					newLeafNode(otherlv_2, grammarAccess.getInputsAccess().getRequiresKeyword_0_2_0());
				}
				otherlv_3='the'
				{
					newLeafNode(otherlv_3, grammarAccess.getInputsAccess().getTheKeyword_0_2_1());
				}
				otherlv_4='following'
				{
					newLeafNode(otherlv_4, grammarAccess.getInputsAccess().getFollowingKeyword_0_2_2());
				}
				otherlv_5='input'
				{
					newLeafNode(otherlv_5, grammarAccess.getInputsAccess().getInputKeyword_0_2_3());
				}
				otherlv_6=':'
				{
					newLeafNode(otherlv_6, grammarAccess.getInputsAccess().getColonKeyword_0_2_4());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInputsAccess().getInputsInputParserRuleCall_1_0());
				}
				lv_inputs_7_0=ruleInput
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputsRule());
					}
					add(
						$current,
						"inputs",
						lv_inputs_7_0,
						"io.deniffel.dsl.useCase.UseCase.Input");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleOutputs
entryRuleOutputs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputsRule()); }
	iv_ruleOutputs=ruleOutputs
	{ $current=$iv_ruleOutputs.current; }
	EOF;

// Rule Outputs
ruleOutputs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='produces:'
			{
				newLeafNode(otherlv_0, grammarAccess.getOutputsAccess().getProducesKeyword_0_0());
			}
			    |
			otherlv_1='produce:'
			{
				newLeafNode(otherlv_1, grammarAccess.getOutputsAccess().getProduceKeyword_0_1());
			}
			    |
			(
				otherlv_2='produces'
				{
					newLeafNode(otherlv_2, grammarAccess.getOutputsAccess().getProducesKeyword_0_2_0());
				}
				otherlv_3='the'
				{
					newLeafNode(otherlv_3, grammarAccess.getOutputsAccess().getTheKeyword_0_2_1());
				}
				otherlv_4='following'
				{
					newLeafNode(otherlv_4, grammarAccess.getOutputsAccess().getFollowingKeyword_0_2_2());
				}
				otherlv_5='output'
				{
					newLeafNode(otherlv_5, grammarAccess.getOutputsAccess().getOutputKeyword_0_2_3());
				}
				otherlv_6=':'
				{
					newLeafNode(otherlv_6, grammarAccess.getOutputsAccess().getColonKeyword_0_2_4());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOutputsAccess().getOutputsOutputParserRuleCall_1_0());
				}
				lv_outputs_7_0=ruleOutput
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutputsRule());
					}
					add(
						$current,
						"outputs",
						lv_outputs_7_0,
						"io.deniffel.dsl.useCase.UseCase.Output");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeAccess().getTypeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_description_3_0=RULE_STRING
				{
					newLeafNode(lv_description_3_0, grammarAccess.getTypeAccess().getDescriptionSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getTypeAccess().getRightParenthesisKeyword_4());
		}
		(
			otherlv_5='['
			{
				newLeafNode(otherlv_5, grammarAccess.getTypeAccess().getLeftSquareBracketKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeAccess().getImportInfoQualifiedNameParserRuleCall_5_1_0());
					}
					lv_importInfo_6_0=ruleQualifiedName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeRule());
						}
						set(
							$current,
							"importInfo",
							lv_importInfo_6_0,
							"io.deniffel.dsl.useCase.UseCase.QualifiedName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=']'
			{
				newLeafNode(otherlv_7, grammarAccess.getTypeAccess().getRightSquareBracketKeyword_5_2());
			}
		)?
	)
;

// Entry rule entryRuleExceptionDecleration
entryRuleExceptionDecleration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExceptionDeclerationRule()); }
	iv_ruleExceptionDecleration=ruleExceptionDecleration
	{ $current=$iv_ruleExceptionDecleration.current; }
	EOF;

// Rule ExceptionDecleration
ruleExceptionDecleration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='error'
		{
			newLeafNode(otherlv_0, grammarAccess.getExceptionDeclerationAccess().getErrorKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getExceptionDeclerationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExceptionDeclerationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getExceptionDeclerationAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_message_3_0=RULE_STRING
				{
					newLeafNode(lv_message_3_0, grammarAccess.getExceptionDeclerationAccess().getMessageSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExceptionDeclerationRule());
					}
					setWithLastConsumed(
						$current,
						"message",
						lv_message_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getExceptionDeclerationAccess().getRightParenthesisKeyword_4());
		}
		(
			otherlv_5='['
			{
				newLeafNode(otherlv_5, grammarAccess.getExceptionDeclerationAccess().getLeftSquareBracketKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExceptionDeclerationAccess().getImportInfoQualifiedNameParserRuleCall_5_1_0());
					}
					lv_importInfo_6_0=ruleQualifiedName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExceptionDeclerationRule());
						}
						set(
							$current,
							"importInfo",
							lv_importInfo_6_0,
							"io.deniffel.dsl.useCase.UseCase.QualifiedName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=']'
			{
				newLeafNode(otherlv_7, grammarAccess.getExceptionDeclerationAccess().getRightSquareBracketKeyword_5_2());
			}
		)?
	)
;

// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	iv_ruleInput=ruleInput
	{ $current=$iv_ruleInput.current; }
	EOF;

// Rule Input
ruleInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_many_0_0='many'
				{
					newLeafNode(lv_many_0_0, grammarAccess.getInputAccess().getManyManyKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInputRule());
					}
					setWithLastConsumed($current, "many", true, "many");
				}
			)
		)?
		otherlv_1='-'
		{
			newLeafNode(otherlv_1, grammarAccess.getInputAccess().getHyphenMinusKeyword_1());
		}
		(
			(
				lv_content_2_0=RULE_STRING
				{
					newLeafNode(lv_content_2_0, grammarAccess.getInputAccess().getContentSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInputRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_3='as'
			{
				newLeafNode(otherlv_3, grammarAccess.getInputAccess().getAsKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInputRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getInputAccess().getTypeTypeCrossReference_3_1_0());
					}
				)
			)
		)?
		(
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getInputAccess().getLeftParenthesisKeyword_4_0());
			}
			otherlv_6='e.g'
			{
				newLeafNode(otherlv_6, grammarAccess.getInputAccess().getEGKeyword_4_1());
			}
			(
				(
					lv_example_7_0=RULE_STRING
					{
						newLeafNode(lv_example_7_0, grammarAccess.getInputAccess().getExampleSTRINGTerminalRuleCall_4_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInputRule());
						}
						setWithLastConsumed(
							$current,
							"example",
							lv_example_7_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getInputAccess().getRightParenthesisKeyword_4_3());
			}
		)?
	)
;

// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	iv_ruleOutput=ruleOutput
	{ $current=$iv_ruleOutput.current; }
	EOF;

// Rule Output
ruleOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_many_0_0='many'
				{
					newLeafNode(lv_many_0_0, grammarAccess.getOutputAccess().getManyManyKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOutputRule());
					}
					setWithLastConsumed($current, "many", true, "many");
				}
			)
		)?
		otherlv_1='-'
		{
			newLeafNode(otherlv_1, grammarAccess.getOutputAccess().getHyphenMinusKeyword_1());
		}
		(
			(
				lv_content_2_0=RULE_STRING
				{
					newLeafNode(lv_content_2_0, grammarAccess.getOutputAccess().getContentSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOutputRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_3='as'
			{
				newLeafNode(otherlv_3, grammarAccess.getOutputAccess().getAsKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOutputRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getOutputAccess().getTypeTypeCrossReference_3_1_0());
					}
				)
			)
		)?
		(
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getOutputAccess().getLeftParenthesisKeyword_4_0());
			}
			otherlv_6='e.g'
			{
				newLeafNode(otherlv_6, grammarAccess.getOutputAccess().getEGKeyword_4_1());
			}
			(
				(
					lv_example_7_0=RULE_STRING
					{
						newLeafNode(lv_example_7_0, grammarAccess.getOutputAccess().getExampleSTRINGTerminalRuleCall_4_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOutputRule());
						}
						setWithLastConsumed(
							$current,
							"example",
							lv_example_7_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getOutputAccess().getRightParenthesisKeyword_4_3());
			}
		)?
	)
;

// Entry rule entryRuleAllowedUserGroups
entryRuleAllowedUserGroups returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAllowedUserGroupsRule()); }
	iv_ruleAllowedUserGroups=ruleAllowedUserGroups
	{ $current=$iv_ruleAllowedUserGroups.current; }
	EOF;

// Rule AllowedUserGroups
ruleAllowedUserGroups returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='allowed-usergroups:'
		{
			newLeafNode(otherlv_0, grammarAccess.getAllowedUserGroupsAccess().getAllowedUsergroupsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAllowedUserGroupsAccess().getGroupsAllowedUserGroupParserRuleCall_1_0());
				}
				lv_groups_1_0=ruleAllowedUserGroup
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAllowedUserGroupsRule());
					}
					add(
						$current,
						"groups",
						lv_groups_1_0,
						"io.deniffel.dsl.useCase.UseCase.AllowedUserGroup");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleAllowedUserGroup
entryRuleAllowedUserGroup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAllowedUserGroupRule()); }
	iv_ruleAllowedUserGroup=ruleAllowedUserGroup
	{ $current=$iv_ruleAllowedUserGroup.current; }
	EOF;

// Rule AllowedUserGroup
ruleAllowedUserGroup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_many_0_0='many'
				{
					newLeafNode(lv_many_0_0, grammarAccess.getAllowedUserGroupAccess().getManyManyKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAllowedUserGroupRule());
					}
					setWithLastConsumed($current, "many", true, "many");
				}
			)
		)?
		otherlv_1='-'
		{
			newLeafNode(otherlv_1, grammarAccess.getAllowedUserGroupAccess().getHyphenMinusKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getAllowedUserGroupAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAllowedUserGroupRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_3='as'
			{
				newLeafNode(otherlv_3, grammarAccess.getAllowedUserGroupAccess().getAsKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAllowedUserGroupRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getAllowedUserGroupAccess().getTypeTypeCrossReference_3_1_0());
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleQualifiedNumber
entryRuleQualifiedNumber returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNumberRule()); }
	iv_ruleQualifiedNumber=ruleQualifiedNumber
	{ $current=$iv_ruleQualifiedNumber.current.getText(); }
	EOF;

// Rule QualifiedNumber
ruleQualifiedNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getQualifiedNumberAccess().getINTTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNumberAccess().getFullStopKeyword_1_0());
			}
			this_INT_2=RULE_INT
			{
				$current.merge(this_INT_2);
			}
			{
				newLeafNode(this_INT_2, grammarAccess.getQualifiedNumberAccess().getINTTerminalRuleCall_1_1());
			}
		)*
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQualifiedNumberAccess().getFullStopKeyword_2());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
