/**
 * generated by Xtext 2.13.0
 */
package io.deniffel.dsl.useCase.generator;

import io.deniffel.dsl.useCase.useCase.UseCase;
import javax.inject.Inject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class UseCaseGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  private /* ClassNamingStrategy */Object classNamingStrategy /* Skipped initializer because of errors */;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field UseCaseGenerator.classNamingStrategy refers to the missing type ClassNamingStrategy"
      + "\nconvert cannot be resolved");
  }
  
  public CharSequence compile(final UseCase usecase) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class ");
    String _name = usecase.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
