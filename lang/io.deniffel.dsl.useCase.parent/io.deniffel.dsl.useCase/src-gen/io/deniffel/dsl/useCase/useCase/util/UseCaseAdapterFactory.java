/**
 * generated by Xtext 2.13.0
 */
package io.deniffel.dsl.useCase.useCase.util;

import io.deniffel.dsl.useCase.useCase.AllowedUserGroup;
import io.deniffel.dsl.useCase.useCase.AllowedUserGroups;
import io.deniffel.dsl.useCase.useCase.BooleanCondition;
import io.deniffel.dsl.useCase.useCase.Condition;
import io.deniffel.dsl.useCase.useCase.Description;
import io.deniffel.dsl.useCase.useCase.Example;
import io.deniffel.dsl.useCase.useCase.ExceptionDecleration;
import io.deniffel.dsl.useCase.useCase.Given;
import io.deniffel.dsl.useCase.useCase.GivenAnd;
import io.deniffel.dsl.useCase.useCase.IfStatement;
import io.deniffel.dsl.useCase.useCase.Input;
import io.deniffel.dsl.useCase.useCase.Inputs;
import io.deniffel.dsl.useCase.useCase.Loop;
import io.deniffel.dsl.useCase.useCase.Model;
import io.deniffel.dsl.useCase.useCase.Notes;
import io.deniffel.dsl.useCase.useCase.OptionalInputs;
import io.deniffel.dsl.useCase.useCase.Output;
import io.deniffel.dsl.useCase.useCase.Outputs;
import io.deniffel.dsl.useCase.useCase.PackagePart;
import io.deniffel.dsl.useCase.useCase.PreConditions;
import io.deniffel.dsl.useCase.useCase.RaiseErrorConditional;
import io.deniffel.dsl.useCase.useCase.RaiseErrorNow;
import io.deniffel.dsl.useCase.useCase.Step;
import io.deniffel.dsl.useCase.useCase.Steps;
import io.deniffel.dsl.useCase.useCase.Then;
import io.deniffel.dsl.useCase.useCase.ThenAnd;
import io.deniffel.dsl.useCase.useCase.Type;
import io.deniffel.dsl.useCase.useCase.UseCase;
import io.deniffel.dsl.useCase.useCase.UseCasePackage;
import io.deniffel.dsl.useCase.useCase.UsedExceptions;
import io.deniffel.dsl.useCase.useCase.UsedTypes;
import io.deniffel.dsl.useCase.useCase.When;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see io.deniffel.dsl.useCase.useCase.UseCasePackage
 * @generated
 */
public class UseCaseAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static UseCasePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UseCaseAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = UseCasePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UseCaseSwitch<Adapter> modelSwitch =
    new UseCaseSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter casePackage(io.deniffel.dsl.useCase.useCase.Package object)
      {
        return createPackageAdapter();
      }
      @Override
      public Adapter casePackagePart(PackagePart object)
      {
        return createPackagePartAdapter();
      }
      @Override
      public Adapter caseUseCase(UseCase object)
      {
        return createUseCaseAdapter();
      }
      @Override
      public Adapter caseDescription(Description object)
      {
        return createDescriptionAdapter();
      }
      @Override
      public Adapter caseAllowedUserGroups(AllowedUserGroups object)
      {
        return createAllowedUserGroupsAdapter();
      }
      @Override
      public Adapter caseAllowedUserGroup(AllowedUserGroup object)
      {
        return createAllowedUserGroupAdapter();
      }
      @Override
      public Adapter caseInputs(Inputs object)
      {
        return createInputsAdapter();
      }
      @Override
      public Adapter caseOptionalInputs(OptionalInputs object)
      {
        return createOptionalInputsAdapter();
      }
      @Override
      public Adapter caseInput(Input object)
      {
        return createInputAdapter();
      }
      @Override
      public Adapter caseOutputs(Outputs object)
      {
        return createOutputsAdapter();
      }
      @Override
      public Adapter caseOutput(Output object)
      {
        return createOutputAdapter();
      }
      @Override
      public Adapter casePreConditions(PreConditions object)
      {
        return createPreConditionsAdapter();
      }
      @Override
      public Adapter caseCondition(Condition object)
      {
        return createConditionAdapter();
      }
      @Override
      public Adapter caseSteps(Steps object)
      {
        return createStepsAdapter();
      }
      @Override
      public Adapter caseStep(Step object)
      {
        return createStepAdapter();
      }
      @Override
      public Adapter caseRaiseErrorConditional(RaiseErrorConditional object)
      {
        return createRaiseErrorConditionalAdapter();
      }
      @Override
      public Adapter caseRaiseErrorNow(RaiseErrorNow object)
      {
        return createRaiseErrorNowAdapter();
      }
      @Override
      public Adapter caseIfStatement(IfStatement object)
      {
        return createIfStatementAdapter();
      }
      @Override
      public Adapter caseLoop(Loop object)
      {
        return createLoopAdapter();
      }
      @Override
      public Adapter caseBooleanCondition(BooleanCondition object)
      {
        return createBooleanConditionAdapter();
      }
      @Override
      public Adapter caseNotes(Notes object)
      {
        return createNotesAdapter();
      }
      @Override
      public Adapter caseUsedTypes(UsedTypes object)
      {
        return createUsedTypesAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseUsedExceptions(UsedExceptions object)
      {
        return createUsedExceptionsAdapter();
      }
      @Override
      public Adapter caseException(io.deniffel.dsl.useCase.useCase.Exception object)
      {
        return createExceptionAdapter();
      }
      @Override
      public Adapter caseExceptionDecleration(ExceptionDecleration object)
      {
        return createExceptionDeclerationAdapter();
      }
      @Override
      public Adapter caseExample(Example object)
      {
        return createExampleAdapter();
      }
      @Override
      public Adapter caseGiven(Given object)
      {
        return createGivenAdapter();
      }
      @Override
      public Adapter caseGivenAnd(GivenAnd object)
      {
        return createGivenAndAdapter();
      }
      @Override
      public Adapter caseWhen(When object)
      {
        return createWhenAdapter();
      }
      @Override
      public Adapter caseThen(Then object)
      {
        return createThenAdapter();
      }
      @Override
      public Adapter caseThenAnd(ThenAnd object)
      {
        return createThenAndAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.Package <em>Package</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.Package
   * @generated
   */
  public Adapter createPackageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.PackagePart <em>Package Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.PackagePart
   * @generated
   */
  public Adapter createPackagePartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.UseCase <em>Use Case</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.UseCase
   * @generated
   */
  public Adapter createUseCaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.Description <em>Description</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.Description
   * @generated
   */
  public Adapter createDescriptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.AllowedUserGroups <em>Allowed User Groups</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.AllowedUserGroups
   * @generated
   */
  public Adapter createAllowedUserGroupsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.AllowedUserGroup <em>Allowed User Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.AllowedUserGroup
   * @generated
   */
  public Adapter createAllowedUserGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.Inputs <em>Inputs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.Inputs
   * @generated
   */
  public Adapter createInputsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.OptionalInputs <em>Optional Inputs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.OptionalInputs
   * @generated
   */
  public Adapter createOptionalInputsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.Input <em>Input</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.Input
   * @generated
   */
  public Adapter createInputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.Outputs <em>Outputs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.Outputs
   * @generated
   */
  public Adapter createOutputsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.Output <em>Output</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.Output
   * @generated
   */
  public Adapter createOutputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.PreConditions <em>Pre Conditions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.PreConditions
   * @generated
   */
  public Adapter createPreConditionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.Condition <em>Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.Condition
   * @generated
   */
  public Adapter createConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.Steps <em>Steps</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.Steps
   * @generated
   */
  public Adapter createStepsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.Step <em>Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.Step
   * @generated
   */
  public Adapter createStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.RaiseErrorConditional <em>Raise Error Conditional</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.RaiseErrorConditional
   * @generated
   */
  public Adapter createRaiseErrorConditionalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.RaiseErrorNow <em>Raise Error Now</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.RaiseErrorNow
   * @generated
   */
  public Adapter createRaiseErrorNowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.IfStatement <em>If Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.IfStatement
   * @generated
   */
  public Adapter createIfStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.Loop <em>Loop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.Loop
   * @generated
   */
  public Adapter createLoopAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.BooleanCondition <em>Boolean Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.BooleanCondition
   * @generated
   */
  public Adapter createBooleanConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.Notes <em>Notes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.Notes
   * @generated
   */
  public Adapter createNotesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.UsedTypes <em>Used Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.UsedTypes
   * @generated
   */
  public Adapter createUsedTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.UsedExceptions <em>Used Exceptions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.UsedExceptions
   * @generated
   */
  public Adapter createUsedExceptionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.Exception <em>Exception</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.Exception
   * @generated
   */
  public Adapter createExceptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.ExceptionDecleration <em>Exception Decleration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.ExceptionDecleration
   * @generated
   */
  public Adapter createExceptionDeclerationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.Example <em>Example</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.Example
   * @generated
   */
  public Adapter createExampleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.Given <em>Given</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.Given
   * @generated
   */
  public Adapter createGivenAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.GivenAnd <em>Given And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.GivenAnd
   * @generated
   */
  public Adapter createGivenAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.When <em>When</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.When
   * @generated
   */
  public Adapter createWhenAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.Then <em>Then</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.Then
   * @generated
   */
  public Adapter createThenAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.deniffel.dsl.useCase.useCase.ThenAnd <em>Then And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.deniffel.dsl.useCase.useCase.ThenAnd
   * @generated
   */
  public Adapter createThenAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //UseCaseAdapterFactory
