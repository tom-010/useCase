/*
 * generated by Xtext 2.13.0
 */
package io.deniffel.dsl.useCase.serializer;

import com.google.inject.Inject;
import io.deniffel.dsl.useCase.services.UseCaseGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class UseCaseSyntacticSequencer extends AbstractSyntacticSequencer {

	protected UseCaseGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AllowedUserGroups_AllowedUsergroupsKeyword_0_0_or___ErlaubtKeyword_0_1_0_FürKeyword_0_1_1__;
	protected AbstractElementAlias match_Description_BeschreibungKeyword_0_2_or_DescriptionKeyword_0_0_or_KurzbeschreibungKeyword_0_1;
	protected AbstractElementAlias match_IfStatement_FallsKeyword_0_1_or_IfKeyword_0_0;
	protected AbstractElementAlias match_Input_AlsKeyword_4_0_1_or_AsKeyword_4_0_0;
	protected AbstractElementAlias match_Input_EGKeyword_5_1_0_or_ZBKeyword_5_1_1;
	protected AbstractElementAlias match_Inputs_RequireKeyword_0_0_1_or_RequiresKeyword_0_0_0_or___BenötigteKeyword_0_1_0_ZutatenKeyword_0_1_1_ColonKeyword_0_1_2___or___RequiresKeyword_0_0_2_0_TheKeyword_0_0_2_1_FollowingKeyword_0_0_2_2_InputKeyword_0_0_2_3_ColonKeyword_0_0_2_4__;
	protected AbstractElementAlias match_Loop_SolangeKeyword_0_0_or_WhileKeyword_0_1;
	protected AbstractElementAlias match_Model_CompanyKeyword_0_1_or_FirmaKeyword_0_0;
	protected AbstractElementAlias match_Notes_AnmerkungKeyword_0_1_1_or_AnmerkungenKeyword_0_1_0_or_NoteKeyword_0_0_1_or_NotesKeyword_0_0_0;
	protected AbstractElementAlias match_Output_AlsKeyword_3_0_1_or_AsKeyword_3_0_0;
	protected AbstractElementAlias match_Output_EGKeyword_4_1_0_or_ZBKeyword_4_1_1;
	protected AbstractElementAlias match_Outputs_ErgebnisKeyword_0_1_or_ProduceKeyword_0_0_1_or_ProducesKeyword_0_0_0_or___ProducesKeyword_0_0_2_0_TheKeyword_0_0_2_1_FollowingKeyword_0_0_2_2_OutputKeyword_0_0_2_3_ColonKeyword_0_0_2_4__;
	protected AbstractElementAlias match_Package_KathegorieKeyword_0_0_or_PackageKeyword_0_1;
	protected AbstractElementAlias match_PreConditions_PreConditionKeyword_0_0_0_or_PreConditionsKeyword_0_0_1_or_VorbedingungenKeyword_0_1;
	protected AbstractElementAlias match_RaiseError___MeldeKeyword_0_1_1_0_FehlerKeyword_0_1_1_1_q___or___RaiseKeyword_0_1_0_0_ErrorKeyword_0_1_0_1_q___or_____ColonKeyword_0_0_0_1_or_FullStopKeyword_0_0_0_0_______BeiKeyword_0_0_1_1_0_FehlerKeyword_0_0_1_1_1_MeldeKeyword_0_0_1_1_2___or___OnKeyword_0_0_1_0_0_ErrorKeyword_0_0_1_0_1_RaiseKeyword_0_0_1_0_2______;
	protected AbstractElementAlias match_Steps_SchritteKeyword_0_1_or_StepsKeyword_0_0;
	protected AbstractElementAlias match_UseCase_RezeptKeyword_0_1_or_UseCaseKeyword_0_0;
	protected AbstractElementAlias match_UseCase___EndKeyword_9_0_0_OfKeyword_9_0_1_UseCaseKeyword_9_0_2___or___EndeKeyword_9_1_0_DesKeyword_9_1_1_RezpetsKeyword_9_1_2__;
	protected AbstractElementAlias match_UsedExceptions___GenutzteKeyword_0_1_0_FehlerKeyword_0_1_1___or___UsedKeyword_0_0_0_ErrorsKeyword_0_0_1__;
	protected AbstractElementAlias match_UsedTypes___GenutzteKeyword_0_1_0_TypenKeyword_0_1_1___or___UsedKeyword_0_0_0_TypesKeyword_0_0_1__;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (UseCaseGrammarAccess) access;
		match_AllowedUserGroups_AllowedUsergroupsKeyword_0_0_or___ErlaubtKeyword_0_1_0_FürKeyword_0_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getAllowedUserGroupsAccess().getErlaubtKeyword_0_1_0()), new TokenAlias(false, false, grammarAccess.getAllowedUserGroupsAccess().getFürKeyword_0_1_1())), new TokenAlias(false, false, grammarAccess.getAllowedUserGroupsAccess().getAllowedUsergroupsKeyword_0_0()));
		match_Description_BeschreibungKeyword_0_2_or_DescriptionKeyword_0_0_or_KurzbeschreibungKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDescriptionAccess().getBeschreibungKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getDescriptionAccess().getDescriptionKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getDescriptionAccess().getKurzbeschreibungKeyword_0_1()));
		match_IfStatement_FallsKeyword_0_1_or_IfKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getIfStatementAccess().getFallsKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getIfStatementAccess().getIfKeyword_0_0()));
		match_Input_AlsKeyword_4_0_1_or_AsKeyword_4_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getInputAccess().getAlsKeyword_4_0_1()), new TokenAlias(false, false, grammarAccess.getInputAccess().getAsKeyword_4_0_0()));
		match_Input_EGKeyword_5_1_0_or_ZBKeyword_5_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getInputAccess().getEGKeyword_5_1_0()), new TokenAlias(false, false, grammarAccess.getInputAccess().getZBKeyword_5_1_1()));
		match_Inputs_RequireKeyword_0_0_1_or_RequiresKeyword_0_0_0_or___BenötigteKeyword_0_1_0_ZutatenKeyword_0_1_1_ColonKeyword_0_1_2___or___RequiresKeyword_0_0_2_0_TheKeyword_0_0_2_1_FollowingKeyword_0_0_2_2_InputKeyword_0_0_2_3_ColonKeyword_0_0_2_4__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getInputsAccess().getBenötigteKeyword_0_1_0()), new TokenAlias(false, false, grammarAccess.getInputsAccess().getZutatenKeyword_0_1_1()), new TokenAlias(false, false, grammarAccess.getInputsAccess().getColonKeyword_0_1_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getInputsAccess().getRequiresKeyword_0_0_2_0()), new TokenAlias(false, false, grammarAccess.getInputsAccess().getTheKeyword_0_0_2_1()), new TokenAlias(false, false, grammarAccess.getInputsAccess().getFollowingKeyword_0_0_2_2()), new TokenAlias(false, false, grammarAccess.getInputsAccess().getInputKeyword_0_0_2_3()), new TokenAlias(false, false, grammarAccess.getInputsAccess().getColonKeyword_0_0_2_4())), new TokenAlias(false, false, grammarAccess.getInputsAccess().getRequireKeyword_0_0_1()), new TokenAlias(false, false, grammarAccess.getInputsAccess().getRequiresKeyword_0_0_0()));
		match_Loop_SolangeKeyword_0_0_or_WhileKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLoopAccess().getSolangeKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getLoopAccess().getWhileKeyword_0_1()));
		match_Model_CompanyKeyword_0_1_or_FirmaKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getModelAccess().getCompanyKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getModelAccess().getFirmaKeyword_0_0()));
		match_Notes_AnmerkungKeyword_0_1_1_or_AnmerkungenKeyword_0_1_0_or_NoteKeyword_0_0_1_or_NotesKeyword_0_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getNotesAccess().getAnmerkungKeyword_0_1_1()), new TokenAlias(false, false, grammarAccess.getNotesAccess().getAnmerkungenKeyword_0_1_0()), new TokenAlias(false, false, grammarAccess.getNotesAccess().getNoteKeyword_0_0_1()), new TokenAlias(false, false, grammarAccess.getNotesAccess().getNotesKeyword_0_0_0()));
		match_Output_AlsKeyword_3_0_1_or_AsKeyword_3_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getOutputAccess().getAlsKeyword_3_0_1()), new TokenAlias(false, false, grammarAccess.getOutputAccess().getAsKeyword_3_0_0()));
		match_Output_EGKeyword_4_1_0_or_ZBKeyword_4_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getOutputAccess().getEGKeyword_4_1_0()), new TokenAlias(false, false, grammarAccess.getOutputAccess().getZBKeyword_4_1_1()));
		match_Outputs_ErgebnisKeyword_0_1_or_ProduceKeyword_0_0_1_or_ProducesKeyword_0_0_0_or___ProducesKeyword_0_0_2_0_TheKeyword_0_0_2_1_FollowingKeyword_0_0_2_2_OutputKeyword_0_0_2_3_ColonKeyword_0_0_2_4__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getOutputsAccess().getProducesKeyword_0_0_2_0()), new TokenAlias(false, false, grammarAccess.getOutputsAccess().getTheKeyword_0_0_2_1()), new TokenAlias(false, false, grammarAccess.getOutputsAccess().getFollowingKeyword_0_0_2_2()), new TokenAlias(false, false, grammarAccess.getOutputsAccess().getOutputKeyword_0_0_2_3()), new TokenAlias(false, false, grammarAccess.getOutputsAccess().getColonKeyword_0_0_2_4())), new TokenAlias(false, false, grammarAccess.getOutputsAccess().getErgebnisKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getOutputsAccess().getProduceKeyword_0_0_1()), new TokenAlias(false, false, grammarAccess.getOutputsAccess().getProducesKeyword_0_0_0()));
		match_Package_KathegorieKeyword_0_0_or_PackageKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPackageAccess().getKathegorieKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getPackageKeyword_0_1()));
		match_PreConditions_PreConditionKeyword_0_0_0_or_PreConditionsKeyword_0_0_1_or_VorbedingungenKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPreConditionsAccess().getPreConditionKeyword_0_0_0()), new TokenAlias(false, false, grammarAccess.getPreConditionsAccess().getPreConditionsKeyword_0_0_1()), new TokenAlias(false, false, grammarAccess.getPreConditionsAccess().getVorbedingungenKeyword_0_1()));
		match_RaiseError___MeldeKeyword_0_1_1_0_FehlerKeyword_0_1_1_1_q___or___RaiseKeyword_0_1_0_0_ErrorKeyword_0_1_0_1_q___or_____ColonKeyword_0_0_0_1_or_FullStopKeyword_0_0_0_0_______BeiKeyword_0_0_1_1_0_FehlerKeyword_0_0_1_1_1_MeldeKeyword_0_0_1_1_2___or___OnKeyword_0_0_1_0_0_ErrorKeyword_0_0_1_0_1_RaiseKeyword_0_0_1_0_2______ = new AlternativeAlias(false, false, new GroupAlias(false, false, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getRaiseErrorAccess().getColonKeyword_0_0_0_1()), new TokenAlias(false, false, grammarAccess.getRaiseErrorAccess().getFullStopKeyword_0_0_0_0())), new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getRaiseErrorAccess().getBeiKeyword_0_0_1_1_0()), new TokenAlias(false, false, grammarAccess.getRaiseErrorAccess().getFehlerKeyword_0_0_1_1_1()), new TokenAlias(false, false, grammarAccess.getRaiseErrorAccess().getMeldeKeyword_0_0_1_1_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getRaiseErrorAccess().getOnKeyword_0_0_1_0_0()), new TokenAlias(false, false, grammarAccess.getRaiseErrorAccess().getErrorKeyword_0_0_1_0_1()), new TokenAlias(false, false, grammarAccess.getRaiseErrorAccess().getRaiseKeyword_0_0_1_0_2())))), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getRaiseErrorAccess().getMeldeKeyword_0_1_1_0()), new TokenAlias(false, true, grammarAccess.getRaiseErrorAccess().getFehlerKeyword_0_1_1_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getRaiseErrorAccess().getRaiseKeyword_0_1_0_0()), new TokenAlias(false, true, grammarAccess.getRaiseErrorAccess().getErrorKeyword_0_1_0_1())));
		match_Steps_SchritteKeyword_0_1_or_StepsKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getStepsAccess().getSchritteKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getStepsAccess().getStepsKeyword_0_0()));
		match_UseCase_RezeptKeyword_0_1_or_UseCaseKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getUseCaseAccess().getRezeptKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getUseCaseAccess().getUseCaseKeyword_0_0()));
		match_UseCase___EndKeyword_9_0_0_OfKeyword_9_0_1_UseCaseKeyword_9_0_2___or___EndeKeyword_9_1_0_DesKeyword_9_1_1_RezpetsKeyword_9_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getUseCaseAccess().getEndKeyword_9_0_0()), new TokenAlias(false, false, grammarAccess.getUseCaseAccess().getOfKeyword_9_0_1()), new TokenAlias(false, false, grammarAccess.getUseCaseAccess().getUseCaseKeyword_9_0_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getUseCaseAccess().getEndeKeyword_9_1_0()), new TokenAlias(false, false, grammarAccess.getUseCaseAccess().getDesKeyword_9_1_1()), new TokenAlias(false, false, grammarAccess.getUseCaseAccess().getRezpetsKeyword_9_1_2())));
		match_UsedExceptions___GenutzteKeyword_0_1_0_FehlerKeyword_0_1_1___or___UsedKeyword_0_0_0_ErrorsKeyword_0_0_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getUsedExceptionsAccess().getGenutzteKeyword_0_1_0()), new TokenAlias(false, false, grammarAccess.getUsedExceptionsAccess().getFehlerKeyword_0_1_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getUsedExceptionsAccess().getUsedKeyword_0_0_0()), new TokenAlias(false, false, grammarAccess.getUsedExceptionsAccess().getErrorsKeyword_0_0_1())));
		match_UsedTypes___GenutzteKeyword_0_1_0_TypenKeyword_0_1_1___or___UsedKeyword_0_0_0_TypesKeyword_0_0_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getUsedTypesAccess().getGenutzteKeyword_0_1_0()), new TokenAlias(false, false, grammarAccess.getUsedTypesAccess().getTypenKeyword_0_1_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getUsedTypesAccess().getUsedKeyword_0_0_0()), new TokenAlias(false, false, grammarAccess.getUsedTypesAccess().getTypesKeyword_0_0_1())));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AllowedUserGroups_AllowedUsergroupsKeyword_0_0_or___ErlaubtKeyword_0_1_0_FürKeyword_0_1_1__.equals(syntax))
				emit_AllowedUserGroups_AllowedUsergroupsKeyword_0_0_or___ErlaubtKeyword_0_1_0_FürKeyword_0_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Description_BeschreibungKeyword_0_2_or_DescriptionKeyword_0_0_or_KurzbeschreibungKeyword_0_1.equals(syntax))
				emit_Description_BeschreibungKeyword_0_2_or_DescriptionKeyword_0_0_or_KurzbeschreibungKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IfStatement_FallsKeyword_0_1_or_IfKeyword_0_0.equals(syntax))
				emit_IfStatement_FallsKeyword_0_1_or_IfKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Input_AlsKeyword_4_0_1_or_AsKeyword_4_0_0.equals(syntax))
				emit_Input_AlsKeyword_4_0_1_or_AsKeyword_4_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Input_EGKeyword_5_1_0_or_ZBKeyword_5_1_1.equals(syntax))
				emit_Input_EGKeyword_5_1_0_or_ZBKeyword_5_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Inputs_RequireKeyword_0_0_1_or_RequiresKeyword_0_0_0_or___BenötigteKeyword_0_1_0_ZutatenKeyword_0_1_1_ColonKeyword_0_1_2___or___RequiresKeyword_0_0_2_0_TheKeyword_0_0_2_1_FollowingKeyword_0_0_2_2_InputKeyword_0_0_2_3_ColonKeyword_0_0_2_4__.equals(syntax))
				emit_Inputs_RequireKeyword_0_0_1_or_RequiresKeyword_0_0_0_or___BenötigteKeyword_0_1_0_ZutatenKeyword_0_1_1_ColonKeyword_0_1_2___or___RequiresKeyword_0_0_2_0_TheKeyword_0_0_2_1_FollowingKeyword_0_0_2_2_InputKeyword_0_0_2_3_ColonKeyword_0_0_2_4__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Loop_SolangeKeyword_0_0_or_WhileKeyword_0_1.equals(syntax))
				emit_Loop_SolangeKeyword_0_0_or_WhileKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_CompanyKeyword_0_1_or_FirmaKeyword_0_0.equals(syntax))
				emit_Model_CompanyKeyword_0_1_or_FirmaKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Notes_AnmerkungKeyword_0_1_1_or_AnmerkungenKeyword_0_1_0_or_NoteKeyword_0_0_1_or_NotesKeyword_0_0_0.equals(syntax))
				emit_Notes_AnmerkungKeyword_0_1_1_or_AnmerkungenKeyword_0_1_0_or_NoteKeyword_0_0_1_or_NotesKeyword_0_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Output_AlsKeyword_3_0_1_or_AsKeyword_3_0_0.equals(syntax))
				emit_Output_AlsKeyword_3_0_1_or_AsKeyword_3_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Output_EGKeyword_4_1_0_or_ZBKeyword_4_1_1.equals(syntax))
				emit_Output_EGKeyword_4_1_0_or_ZBKeyword_4_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Outputs_ErgebnisKeyword_0_1_or_ProduceKeyword_0_0_1_or_ProducesKeyword_0_0_0_or___ProducesKeyword_0_0_2_0_TheKeyword_0_0_2_1_FollowingKeyword_0_0_2_2_OutputKeyword_0_0_2_3_ColonKeyword_0_0_2_4__.equals(syntax))
				emit_Outputs_ErgebnisKeyword_0_1_or_ProduceKeyword_0_0_1_or_ProducesKeyword_0_0_0_or___ProducesKeyword_0_0_2_0_TheKeyword_0_0_2_1_FollowingKeyword_0_0_2_2_OutputKeyword_0_0_2_3_ColonKeyword_0_0_2_4__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package_KathegorieKeyword_0_0_or_PackageKeyword_0_1.equals(syntax))
				emit_Package_KathegorieKeyword_0_0_or_PackageKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PreConditions_PreConditionKeyword_0_0_0_or_PreConditionsKeyword_0_0_1_or_VorbedingungenKeyword_0_1.equals(syntax))
				emit_PreConditions_PreConditionKeyword_0_0_0_or_PreConditionsKeyword_0_0_1_or_VorbedingungenKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RaiseError___MeldeKeyword_0_1_1_0_FehlerKeyword_0_1_1_1_q___or___RaiseKeyword_0_1_0_0_ErrorKeyword_0_1_0_1_q___or_____ColonKeyword_0_0_0_1_or_FullStopKeyword_0_0_0_0_______BeiKeyword_0_0_1_1_0_FehlerKeyword_0_0_1_1_1_MeldeKeyword_0_0_1_1_2___or___OnKeyword_0_0_1_0_0_ErrorKeyword_0_0_1_0_1_RaiseKeyword_0_0_1_0_2______.equals(syntax))
				emit_RaiseError___MeldeKeyword_0_1_1_0_FehlerKeyword_0_1_1_1_q___or___RaiseKeyword_0_1_0_0_ErrorKeyword_0_1_0_1_q___or_____ColonKeyword_0_0_0_1_or_FullStopKeyword_0_0_0_0_______BeiKeyword_0_0_1_1_0_FehlerKeyword_0_0_1_1_1_MeldeKeyword_0_0_1_1_2___or___OnKeyword_0_0_1_0_0_ErrorKeyword_0_0_1_0_1_RaiseKeyword_0_0_1_0_2______(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Steps_SchritteKeyword_0_1_or_StepsKeyword_0_0.equals(syntax))
				emit_Steps_SchritteKeyword_0_1_or_StepsKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_UseCase_RezeptKeyword_0_1_or_UseCaseKeyword_0_0.equals(syntax))
				emit_UseCase_RezeptKeyword_0_1_or_UseCaseKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_UseCase___EndKeyword_9_0_0_OfKeyword_9_0_1_UseCaseKeyword_9_0_2___or___EndeKeyword_9_1_0_DesKeyword_9_1_1_RezpetsKeyword_9_1_2__.equals(syntax))
				emit_UseCase___EndKeyword_9_0_0_OfKeyword_9_0_1_UseCaseKeyword_9_0_2___or___EndeKeyword_9_1_0_DesKeyword_9_1_1_RezpetsKeyword_9_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_UsedExceptions___GenutzteKeyword_0_1_0_FehlerKeyword_0_1_1___or___UsedKeyword_0_0_0_ErrorsKeyword_0_0_1__.equals(syntax))
				emit_UsedExceptions___GenutzteKeyword_0_1_0_FehlerKeyword_0_1_1___or___UsedKeyword_0_0_0_ErrorsKeyword_0_0_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_UsedTypes___GenutzteKeyword_0_1_0_TypenKeyword_0_1_1___or___UsedKeyword_0_0_0_TypesKeyword_0_0_1__.equals(syntax))
				emit_UsedTypes___GenutzteKeyword_0_1_0_TypenKeyword_0_1_1___or___UsedKeyword_0_0_0_TypesKeyword_0_0_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'allowed-usergroups:' | ('Erlaubt' 'für:')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) groups+=AllowedUserGroup
	 */
	protected void emit_AllowedUserGroups_AllowedUsergroupsKeyword_0_0_or___ErlaubtKeyword_0_1_0_FürKeyword_0_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'description:' | 'Kurzbeschreibung:' | 'Beschreibung'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=STRING
	 */
	protected void emit_Description_BeschreibungKeyword_0_2_or_DescriptionKeyword_0_0_or_KurzbeschreibungKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'If' | 'Falls'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) condition=STRING
	 */
	protected void emit_IfStatement_FallsKeyword_0_1_or_IfKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'as' | 'als'
	 *
	 * This ambiguous syntax occurs at:
	 *     content=STRING (ambiguity) type=[Type|ID]
	 */
	protected void emit_Input_AlsKeyword_4_0_1_or_AsKeyword_4_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'e.g' | 'z.B.'
	 *
	 * This ambiguous syntax occurs at:
	 *     content=STRING '(' (ambiguity) example=STRING
	 *     type=[Type|ID] '(' (ambiguity) example=STRING
	 */
	protected void emit_Input_EGKeyword_5_1_0_or_ZBKeyword_5_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('requires' 'the' 'following' 'input' ':') | ('Benötigte' 'Zutaten' ':') | 'requires:' | 'require:'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) inputs+=Input
	 */
	protected void emit_Inputs_RequireKeyword_0_0_1_or_RequiresKeyword_0_0_0_or___BenötigteKeyword_0_1_0_ZutatenKeyword_0_1_1_ColonKeyword_0_1_2___or___RequiresKeyword_0_0_2_0_TheKeyword_0_0_2_1_FollowingKeyword_0_0_2_2_InputKeyword_0_0_2_3_ColonKeyword_0_0_2_4__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Solange' | 'While'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) condition=STRING
	 */
	protected void emit_Loop_SolangeKeyword_0_0_or_WhileKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Firma' | 'Company'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) company=QualifiedName
	 */
	protected void emit_Model_CompanyKeyword_0_1_or_FirmaKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'notes:' | 'note:' | 'Anmerkungen:' | 'Anmerkung:'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) content=STRING
	 */
	protected void emit_Notes_AnmerkungKeyword_0_1_1_or_AnmerkungenKeyword_0_1_0_or_NoteKeyword_0_0_1_or_NotesKeyword_0_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'as' | 'als'
	 *
	 * This ambiguous syntax occurs at:
	 *     content=STRING (ambiguity) type=[Type|ID]
	 */
	protected void emit_Output_AlsKeyword_3_0_1_or_AsKeyword_3_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'e.g' | 'z.B.'
	 *
	 * This ambiguous syntax occurs at:
	 *     content=STRING '(' (ambiguity) example=STRING
	 *     type=[Type|ID] '(' (ambiguity) example=STRING
	 */
	protected void emit_Output_EGKeyword_4_1_0_or_ZBKeyword_4_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('produces' 'the' 'following' 'output' ':') | 'produces:' | 'produce:' | 'Ergebnis:'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) outputs+=Output
	 */
	protected void emit_Outputs_ErgebnisKeyword_0_1_or_ProduceKeyword_0_0_1_or_ProducesKeyword_0_0_0_or___ProducesKeyword_0_0_2_0_TheKeyword_0_0_2_1_FollowingKeyword_0_0_2_2_OutputKeyword_0_0_2_3_ColonKeyword_0_0_2_4__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Kathegorie' | 'package'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) parts+=PackagePart
	 */
	protected void emit_Package_KathegorieKeyword_0_0_or_PackageKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'pre-condition:' | 'pre-conditions:' | 'Vorbedingungen:'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) conditions+=Condition
	 */
	protected void emit_PreConditions_PreConditionKeyword_0_0_0_or_PreConditionsKeyword_0_0_1_or_VorbedingungenKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (('.' | ':') (('On' 'error' 'raise') | ('Bei' 'Fehler' 'melde'))) | ('Raise' 'error'?) | ('Melde' 'Fehler'?)
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) exception=Exception
	 */
	protected void emit_RaiseError___MeldeKeyword_0_1_1_0_FehlerKeyword_0_1_1_1_q___or___RaiseKeyword_0_1_0_0_ErrorKeyword_0_1_0_1_q___or_____ColonKeyword_0_0_0_1_or_FullStopKeyword_0_0_0_0_______BeiKeyword_0_0_1_1_0_FehlerKeyword_0_0_1_1_1_MeldeKeyword_0_0_1_1_2___or___OnKeyword_0_0_1_0_0_ErrorKeyword_0_0_1_0_1_RaiseKeyword_0_0_1_0_2______(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'steps:' | 'Schritte:'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) steps+=Step
	 */
	protected void emit_Steps_SchritteKeyword_0_1_or_StepsKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'use-case' | 'Rezept'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=STRING
	 */
	protected void emit_UseCase_RezeptKeyword_0_1_or_UseCaseKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('end' 'of' 'use-case') | ('Ende' 'des' 'Rezpets')
	 *
	 * This ambiguous syntax occurs at:
	 *     allowedUserGroups+=AllowedUserGroups (ambiguity) (rule end)
	 *     descriptions+=Description (ambiguity) (rule end)
	 *     inputs+=Inputs (ambiguity) (rule end)
	 *     name=STRING (ambiguity) (rule end)
	 *     notes+=Notes (ambiguity) (rule end)
	 *     outputs+=Outputs (ambiguity) (rule end)
	 *     preconditions=PreConditions (ambiguity) (rule end)
	 *     steps+=Steps (ambiguity) (rule end)
	 */
	protected void emit_UseCase___EndKeyword_9_0_0_OfKeyword_9_0_1_UseCaseKeyword_9_0_2___or___EndeKeyword_9_1_0_DesKeyword_9_1_1_RezpetsKeyword_9_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('used' 'errors:') | ('Genutzte' 'Fehler:')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) exceptions+=ExceptionDecleration
	 */
	protected void emit_UsedExceptions___GenutzteKeyword_0_1_0_FehlerKeyword_0_1_1___or___UsedKeyword_0_0_0_ErrorsKeyword_0_0_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('used' 'types:') | ('Genutzte' 'Typen:')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) types+=Type
	 */
	protected void emit_UsedTypes___GenutzteKeyword_0_1_0_TypenKeyword_0_1_1___or___UsedKeyword_0_0_0_TypesKeyword_0_0_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
