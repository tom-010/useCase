/*
 * generated by Xtext 2.13.0
 */
package io.deniffel.dsl.useCase.serializer;

import com.google.inject.Inject;
import io.deniffel.dsl.useCase.services.UseCaseGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class UseCaseSyntacticSequencer extends AbstractSyntacticSequencer {

	protected UseCaseGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Inputs_RequireKeyword_0_1_or_RequiresKeyword_0_0_or___RequiresKeyword_0_2_0_TheKeyword_0_2_1_FollowingKeyword_0_2_2_InputKeyword_0_2_3_ColonKeyword_0_2_4__;
	protected AbstractElementAlias match_Notes_NoteKeyword_0_1_or_NotesKeyword_0_0;
	protected AbstractElementAlias match_Outputs_ProduceKeyword_0_1_or_ProducesKeyword_0_0_or___ProducesKeyword_0_2_0_TheKeyword_0_2_1_FollowingKeyword_0_2_2_OutputKeyword_0_2_3_ColonKeyword_0_2_4__;
	protected AbstractElementAlias match_PreConditions_PreConditionKeyword_0_0_or_PreConditionsKeyword_0_1;
	protected AbstractElementAlias match_RaiseError_RaiseKeyword_1_0_or___OnKeyword_1_1_0_ErrorKeyword_1_1_1_RaiseKeyword_1_1_2__;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (UseCaseGrammarAccess) access;
		match_Inputs_RequireKeyword_0_1_or_RequiresKeyword_0_0_or___RequiresKeyword_0_2_0_TheKeyword_0_2_1_FollowingKeyword_0_2_2_InputKeyword_0_2_3_ColonKeyword_0_2_4__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getInputsAccess().getRequiresKeyword_0_2_0()), new TokenAlias(false, false, grammarAccess.getInputsAccess().getTheKeyword_0_2_1()), new TokenAlias(false, false, grammarAccess.getInputsAccess().getFollowingKeyword_0_2_2()), new TokenAlias(false, false, grammarAccess.getInputsAccess().getInputKeyword_0_2_3()), new TokenAlias(false, false, grammarAccess.getInputsAccess().getColonKeyword_0_2_4())), new TokenAlias(false, false, grammarAccess.getInputsAccess().getRequireKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getInputsAccess().getRequiresKeyword_0_0()));
		match_Notes_NoteKeyword_0_1_or_NotesKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getNotesAccess().getNoteKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getNotesAccess().getNotesKeyword_0_0()));
		match_Outputs_ProduceKeyword_0_1_or_ProducesKeyword_0_0_or___ProducesKeyword_0_2_0_TheKeyword_0_2_1_FollowingKeyword_0_2_2_OutputKeyword_0_2_3_ColonKeyword_0_2_4__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getOutputsAccess().getProducesKeyword_0_2_0()), new TokenAlias(false, false, grammarAccess.getOutputsAccess().getTheKeyword_0_2_1()), new TokenAlias(false, false, grammarAccess.getOutputsAccess().getFollowingKeyword_0_2_2()), new TokenAlias(false, false, grammarAccess.getOutputsAccess().getOutputKeyword_0_2_3()), new TokenAlias(false, false, grammarAccess.getOutputsAccess().getColonKeyword_0_2_4())), new TokenAlias(false, false, grammarAccess.getOutputsAccess().getProduceKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getOutputsAccess().getProducesKeyword_0_0()));
		match_PreConditions_PreConditionKeyword_0_0_or_PreConditionsKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPreConditionsAccess().getPreConditionKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getPreConditionsAccess().getPreConditionsKeyword_0_1()));
		match_RaiseError_RaiseKeyword_1_0_or___OnKeyword_1_1_0_ErrorKeyword_1_1_1_RaiseKeyword_1_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getRaiseErrorAccess().getOnKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getRaiseErrorAccess().getErrorKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getRaiseErrorAccess().getRaiseKeyword_1_1_2())), new TokenAlias(false, false, grammarAccess.getRaiseErrorAccess().getRaiseKeyword_1_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Inputs_RequireKeyword_0_1_or_RequiresKeyword_0_0_or___RequiresKeyword_0_2_0_TheKeyword_0_2_1_FollowingKeyword_0_2_2_InputKeyword_0_2_3_ColonKeyword_0_2_4__.equals(syntax))
				emit_Inputs_RequireKeyword_0_1_or_RequiresKeyword_0_0_or___RequiresKeyword_0_2_0_TheKeyword_0_2_1_FollowingKeyword_0_2_2_InputKeyword_0_2_3_ColonKeyword_0_2_4__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Notes_NoteKeyword_0_1_or_NotesKeyword_0_0.equals(syntax))
				emit_Notes_NoteKeyword_0_1_or_NotesKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Outputs_ProduceKeyword_0_1_or_ProducesKeyword_0_0_or___ProducesKeyword_0_2_0_TheKeyword_0_2_1_FollowingKeyword_0_2_2_OutputKeyword_0_2_3_ColonKeyword_0_2_4__.equals(syntax))
				emit_Outputs_ProduceKeyword_0_1_or_ProducesKeyword_0_0_or___ProducesKeyword_0_2_0_TheKeyword_0_2_1_FollowingKeyword_0_2_2_OutputKeyword_0_2_3_ColonKeyword_0_2_4__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PreConditions_PreConditionKeyword_0_0_or_PreConditionsKeyword_0_1.equals(syntax))
				emit_PreConditions_PreConditionKeyword_0_0_or_PreConditionsKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RaiseError_RaiseKeyword_1_0_or___OnKeyword_1_1_0_ErrorKeyword_1_1_1_RaiseKeyword_1_1_2__.equals(syntax))
				emit_RaiseError_RaiseKeyword_1_0_or___OnKeyword_1_1_0_ErrorKeyword_1_1_1_RaiseKeyword_1_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('requires' 'the' 'following' 'input' ':') | 'requires:' | 'require:'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) inputs+=Input
	 */
	protected void emit_Inputs_RequireKeyword_0_1_or_RequiresKeyword_0_0_or___RequiresKeyword_0_2_0_TheKeyword_0_2_1_FollowingKeyword_0_2_2_InputKeyword_0_2_3_ColonKeyword_0_2_4__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'notes:' | 'note:'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) content=STRING
	 */
	protected void emit_Notes_NoteKeyword_0_1_or_NotesKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('produces' 'the' 'following' 'output' ':') | 'produces:' | 'produce:'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) outputs+=Output
	 */
	protected void emit_Outputs_ProduceKeyword_0_1_or_ProducesKeyword_0_0_or___ProducesKeyword_0_2_0_TheKeyword_0_2_1_FollowingKeyword_0_2_2_OutputKeyword_0_2_3_ColonKeyword_0_2_4__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'pre-condition:' | 'pre-conditions:'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) conditions+=Condition
	 */
	protected void emit_PreConditions_PreConditionKeyword_0_0_or_PreConditionsKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Raise' | ('On' 'error' 'raise')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '.' (ambiguity) exception=Exception
	 */
	protected void emit_RaiseError_RaiseKeyword_1_0_or___OnKeyword_1_1_0_ErrorKeyword_1_1_1_RaiseKeyword_1_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
