/**
 * generated by Xtext 2.13.0
 */
package io.deniffel.dsl.useCase.useCase.impl;

import io.deniffel.dsl.useCase.useCase.AllowedUserGroups;
import io.deniffel.dsl.useCase.useCase.Description;
import io.deniffel.dsl.useCase.useCase.Inputs;
import io.deniffel.dsl.useCase.useCase.Notes;
import io.deniffel.dsl.useCase.useCase.OptionalInputs;
import io.deniffel.dsl.useCase.useCase.Outputs;
import io.deniffel.dsl.useCase.useCase.PreConditions;
import io.deniffel.dsl.useCase.useCase.Steps;
import io.deniffel.dsl.useCase.useCase.UseCase;
import io.deniffel.dsl.useCase.useCase.UseCasePackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Use Case</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.deniffel.dsl.useCase.useCase.impl.UseCaseImpl#getName <em>Name</em>}</li>
 *   <li>{@link io.deniffel.dsl.useCase.useCase.impl.UseCaseImpl#getDescriptions <em>Descriptions</em>}</li>
 *   <li>{@link io.deniffel.dsl.useCase.useCase.impl.UseCaseImpl#getAllowedUserGroups <em>Allowed User Groups</em>}</li>
 *   <li>{@link io.deniffel.dsl.useCase.useCase.impl.UseCaseImpl#getInputs <em>Inputs</em>}</li>
 *   <li>{@link io.deniffel.dsl.useCase.useCase.impl.UseCaseImpl#getOptionalInputs <em>Optional Inputs</em>}</li>
 *   <li>{@link io.deniffel.dsl.useCase.useCase.impl.UseCaseImpl#getOutputs <em>Outputs</em>}</li>
 *   <li>{@link io.deniffel.dsl.useCase.useCase.impl.UseCaseImpl#getPreconditions <em>Preconditions</em>}</li>
 *   <li>{@link io.deniffel.dsl.useCase.useCase.impl.UseCaseImpl#getSteps <em>Steps</em>}</li>
 *   <li>{@link io.deniffel.dsl.useCase.useCase.impl.UseCaseImpl#getNotes <em>Notes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UseCaseImpl extends MinimalEObjectImpl.Container implements UseCase
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getDescriptions() <em>Descriptions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescriptions()
   * @generated
   * @ordered
   */
  protected EList<Description> descriptions;

  /**
   * The cached value of the '{@link #getAllowedUserGroups() <em>Allowed User Groups</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAllowedUserGroups()
   * @generated
   * @ordered
   */
  protected EList<AllowedUserGroups> allowedUserGroups;

  /**
   * The cached value of the '{@link #getInputs() <em>Inputs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputs()
   * @generated
   * @ordered
   */
  protected EList<Inputs> inputs;

  /**
   * The cached value of the '{@link #getOptionalInputs() <em>Optional Inputs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOptionalInputs()
   * @generated
   * @ordered
   */
  protected EList<OptionalInputs> optionalInputs;

  /**
   * The cached value of the '{@link #getOutputs() <em>Outputs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutputs()
   * @generated
   * @ordered
   */
  protected EList<Outputs> outputs;

  /**
   * The cached value of the '{@link #getPreconditions() <em>Preconditions</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPreconditions()
   * @generated
   * @ordered
   */
  protected PreConditions preconditions;

  /**
   * The cached value of the '{@link #getSteps() <em>Steps</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSteps()
   * @generated
   * @ordered
   */
  protected EList<Steps> steps;

  /**
   * The cached value of the '{@link #getNotes() <em>Notes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNotes()
   * @generated
   * @ordered
   */
  protected EList<Notes> notes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UseCaseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UseCasePackage.Literals.USE_CASE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UseCasePackage.USE_CASE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Description> getDescriptions()
  {
    if (descriptions == null)
    {
      descriptions = new EObjectContainmentEList<Description>(Description.class, this, UseCasePackage.USE_CASE__DESCRIPTIONS);
    }
    return descriptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AllowedUserGroups> getAllowedUserGroups()
  {
    if (allowedUserGroups == null)
    {
      allowedUserGroups = new EObjectContainmentEList<AllowedUserGroups>(AllowedUserGroups.class, this, UseCasePackage.USE_CASE__ALLOWED_USER_GROUPS);
    }
    return allowedUserGroups;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Inputs> getInputs()
  {
    if (inputs == null)
    {
      inputs = new EObjectContainmentEList<Inputs>(Inputs.class, this, UseCasePackage.USE_CASE__INPUTS);
    }
    return inputs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<OptionalInputs> getOptionalInputs()
  {
    if (optionalInputs == null)
    {
      optionalInputs = new EObjectContainmentEList<OptionalInputs>(OptionalInputs.class, this, UseCasePackage.USE_CASE__OPTIONAL_INPUTS);
    }
    return optionalInputs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Outputs> getOutputs()
  {
    if (outputs == null)
    {
      outputs = new EObjectContainmentEList<Outputs>(Outputs.class, this, UseCasePackage.USE_CASE__OUTPUTS);
    }
    return outputs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PreConditions getPreconditions()
  {
    return preconditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPreconditions(PreConditions newPreconditions, NotificationChain msgs)
  {
    PreConditions oldPreconditions = preconditions;
    preconditions = newPreconditions;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UseCasePackage.USE_CASE__PRECONDITIONS, oldPreconditions, newPreconditions);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPreconditions(PreConditions newPreconditions)
  {
    if (newPreconditions != preconditions)
    {
      NotificationChain msgs = null;
      if (preconditions != null)
        msgs = ((InternalEObject)preconditions).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UseCasePackage.USE_CASE__PRECONDITIONS, null, msgs);
      if (newPreconditions != null)
        msgs = ((InternalEObject)newPreconditions).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UseCasePackage.USE_CASE__PRECONDITIONS, null, msgs);
      msgs = basicSetPreconditions(newPreconditions, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UseCasePackage.USE_CASE__PRECONDITIONS, newPreconditions, newPreconditions));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Steps> getSteps()
  {
    if (steps == null)
    {
      steps = new EObjectContainmentEList<Steps>(Steps.class, this, UseCasePackage.USE_CASE__STEPS);
    }
    return steps;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Notes> getNotes()
  {
    if (notes == null)
    {
      notes = new EObjectContainmentEList<Notes>(Notes.class, this, UseCasePackage.USE_CASE__NOTES);
    }
    return notes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UseCasePackage.USE_CASE__DESCRIPTIONS:
        return ((InternalEList<?>)getDescriptions()).basicRemove(otherEnd, msgs);
      case UseCasePackage.USE_CASE__ALLOWED_USER_GROUPS:
        return ((InternalEList<?>)getAllowedUserGroups()).basicRemove(otherEnd, msgs);
      case UseCasePackage.USE_CASE__INPUTS:
        return ((InternalEList<?>)getInputs()).basicRemove(otherEnd, msgs);
      case UseCasePackage.USE_CASE__OPTIONAL_INPUTS:
        return ((InternalEList<?>)getOptionalInputs()).basicRemove(otherEnd, msgs);
      case UseCasePackage.USE_CASE__OUTPUTS:
        return ((InternalEList<?>)getOutputs()).basicRemove(otherEnd, msgs);
      case UseCasePackage.USE_CASE__PRECONDITIONS:
        return basicSetPreconditions(null, msgs);
      case UseCasePackage.USE_CASE__STEPS:
        return ((InternalEList<?>)getSteps()).basicRemove(otherEnd, msgs);
      case UseCasePackage.USE_CASE__NOTES:
        return ((InternalEList<?>)getNotes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UseCasePackage.USE_CASE__NAME:
        return getName();
      case UseCasePackage.USE_CASE__DESCRIPTIONS:
        return getDescriptions();
      case UseCasePackage.USE_CASE__ALLOWED_USER_GROUPS:
        return getAllowedUserGroups();
      case UseCasePackage.USE_CASE__INPUTS:
        return getInputs();
      case UseCasePackage.USE_CASE__OPTIONAL_INPUTS:
        return getOptionalInputs();
      case UseCasePackage.USE_CASE__OUTPUTS:
        return getOutputs();
      case UseCasePackage.USE_CASE__PRECONDITIONS:
        return getPreconditions();
      case UseCasePackage.USE_CASE__STEPS:
        return getSteps();
      case UseCasePackage.USE_CASE__NOTES:
        return getNotes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UseCasePackage.USE_CASE__NAME:
        setName((String)newValue);
        return;
      case UseCasePackage.USE_CASE__DESCRIPTIONS:
        getDescriptions().clear();
        getDescriptions().addAll((Collection<? extends Description>)newValue);
        return;
      case UseCasePackage.USE_CASE__ALLOWED_USER_GROUPS:
        getAllowedUserGroups().clear();
        getAllowedUserGroups().addAll((Collection<? extends AllowedUserGroups>)newValue);
        return;
      case UseCasePackage.USE_CASE__INPUTS:
        getInputs().clear();
        getInputs().addAll((Collection<? extends Inputs>)newValue);
        return;
      case UseCasePackage.USE_CASE__OPTIONAL_INPUTS:
        getOptionalInputs().clear();
        getOptionalInputs().addAll((Collection<? extends OptionalInputs>)newValue);
        return;
      case UseCasePackage.USE_CASE__OUTPUTS:
        getOutputs().clear();
        getOutputs().addAll((Collection<? extends Outputs>)newValue);
        return;
      case UseCasePackage.USE_CASE__PRECONDITIONS:
        setPreconditions((PreConditions)newValue);
        return;
      case UseCasePackage.USE_CASE__STEPS:
        getSteps().clear();
        getSteps().addAll((Collection<? extends Steps>)newValue);
        return;
      case UseCasePackage.USE_CASE__NOTES:
        getNotes().clear();
        getNotes().addAll((Collection<? extends Notes>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UseCasePackage.USE_CASE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case UseCasePackage.USE_CASE__DESCRIPTIONS:
        getDescriptions().clear();
        return;
      case UseCasePackage.USE_CASE__ALLOWED_USER_GROUPS:
        getAllowedUserGroups().clear();
        return;
      case UseCasePackage.USE_CASE__INPUTS:
        getInputs().clear();
        return;
      case UseCasePackage.USE_CASE__OPTIONAL_INPUTS:
        getOptionalInputs().clear();
        return;
      case UseCasePackage.USE_CASE__OUTPUTS:
        getOutputs().clear();
        return;
      case UseCasePackage.USE_CASE__PRECONDITIONS:
        setPreconditions((PreConditions)null);
        return;
      case UseCasePackage.USE_CASE__STEPS:
        getSteps().clear();
        return;
      case UseCasePackage.USE_CASE__NOTES:
        getNotes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UseCasePackage.USE_CASE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case UseCasePackage.USE_CASE__DESCRIPTIONS:
        return descriptions != null && !descriptions.isEmpty();
      case UseCasePackage.USE_CASE__ALLOWED_USER_GROUPS:
        return allowedUserGroups != null && !allowedUserGroups.isEmpty();
      case UseCasePackage.USE_CASE__INPUTS:
        return inputs != null && !inputs.isEmpty();
      case UseCasePackage.USE_CASE__OPTIONAL_INPUTS:
        return optionalInputs != null && !optionalInputs.isEmpty();
      case UseCasePackage.USE_CASE__OUTPUTS:
        return outputs != null && !outputs.isEmpty();
      case UseCasePackage.USE_CASE__PRECONDITIONS:
        return preconditions != null;
      case UseCasePackage.USE_CASE__STEPS:
        return steps != null && !steps.isEmpty();
      case UseCasePackage.USE_CASE__NOTES:
        return notes != null && !notes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //UseCaseImpl
