/*
 * generated by Xtext 2.13.0
 */
package io.deniffel.dsl.useCase.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UseCaseGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.deniffel.dsl.useCase.UseCase.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypesTypeParserRuleCall_0_0 = (RuleCall)cTypesAssignment_0.eContents().get(0);
		private final Assignment cUseCasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUseCasesUseCaseParserRuleCall_1_0 = (RuleCall)cUseCasesAssignment_1.eContents().get(0);
		
		//Model:
		//	types+=Type*
		//	useCases+=UseCase*;
		@Override public ParserRule getRule() { return rule; }
		
		//types+=Type* useCases+=UseCase*
		public Group getGroup() { return cGroup; }
		
		//types+=Type*
		public Assignment getTypesAssignment_0() { return cTypesAssignment_0; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_0_0() { return cTypesTypeParserRuleCall_0_0; }
		
		//useCases+=UseCase*
		public Assignment getUseCasesAssignment_1() { return cUseCasesAssignment_1; }
		
		//UseCase
		public RuleCall getUseCasesUseCaseParserRuleCall_1_0() { return cUseCasesUseCaseParserRuleCall_1_0; }
	}
	public class UseCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.deniffel.dsl.useCase.UseCase.UseCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionsDescriptionParserRuleCall_2_0 = (RuleCall)cDescriptionsAssignment_2.eContents().get(0);
		private final Assignment cAllowedUserGroupsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAllowedUserGroupsAllowedUserGroupsParserRuleCall_3_0 = (RuleCall)cAllowedUserGroupsAssignment_3.eContents().get(0);
		private final Assignment cInputsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInputsInputsParserRuleCall_4_0 = (RuleCall)cInputsAssignment_4.eContents().get(0);
		private final Assignment cOutputsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOutputsOutputsParserRuleCall_5_0 = (RuleCall)cOutputsAssignment_5.eContents().get(0);
		private final Assignment cStepsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStepsStepsParserRuleCall_6_0 = (RuleCall)cStepsAssignment_6.eContents().get(0);
		private final Assignment cNotesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNotesNotesParserRuleCall_7_0 = (RuleCall)cNotesAssignment_7.eContents().get(0);
		private final Keyword cEndKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cOfKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cUseCaseKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//UseCase:
		//	'use-case' name=STRING
		//	descriptions+=Description?
		//	allowedUserGroups+=AllowedUserGroups?
		//	inputs+=Inputs?
		//	outputs+=Outputs?
		//	steps+=Steps?
		//	notes+=Notes?
		//	'end' 'of' 'use-case';
		@Override public ParserRule getRule() { return rule; }
		
		//'use-case' name=STRING descriptions+=Description? allowedUserGroups+=AllowedUserGroups? inputs+=Inputs?
		//outputs+=Outputs? steps+=Steps? notes+=Notes? 'end' 'of' 'use-case'
		public Group getGroup() { return cGroup; }
		
		//'use-case'
		public Keyword getUseCaseKeyword_0() { return cUseCaseKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//descriptions+=Description?
		public Assignment getDescriptionsAssignment_2() { return cDescriptionsAssignment_2; }
		
		//Description
		public RuleCall getDescriptionsDescriptionParserRuleCall_2_0() { return cDescriptionsDescriptionParserRuleCall_2_0; }
		
		//allowedUserGroups+=AllowedUserGroups?
		public Assignment getAllowedUserGroupsAssignment_3() { return cAllowedUserGroupsAssignment_3; }
		
		//AllowedUserGroups
		public RuleCall getAllowedUserGroupsAllowedUserGroupsParserRuleCall_3_0() { return cAllowedUserGroupsAllowedUserGroupsParserRuleCall_3_0; }
		
		//inputs+=Inputs?
		public Assignment getInputsAssignment_4() { return cInputsAssignment_4; }
		
		//Inputs
		public RuleCall getInputsInputsParserRuleCall_4_0() { return cInputsInputsParserRuleCall_4_0; }
		
		//outputs+=Outputs?
		public Assignment getOutputsAssignment_5() { return cOutputsAssignment_5; }
		
		//Outputs
		public RuleCall getOutputsOutputsParserRuleCall_5_0() { return cOutputsOutputsParserRuleCall_5_0; }
		
		//steps+=Steps?
		public Assignment getStepsAssignment_6() { return cStepsAssignment_6; }
		
		//Steps
		public RuleCall getStepsStepsParserRuleCall_6_0() { return cStepsStepsParserRuleCall_6_0; }
		
		//notes+=Notes?
		public Assignment getNotesAssignment_7() { return cNotesAssignment_7; }
		
		//Notes
		public RuleCall getNotesNotesParserRuleCall_7_0() { return cNotesNotesParserRuleCall_7_0; }
		
		//'end'
		public Keyword getEndKeyword_8() { return cEndKeyword_8; }
		
		//'of'
		public Keyword getOfKeyword_9() { return cOfKeyword_9; }
		
		//'use-case'
		public Keyword getUseCaseKeyword_10() { return cUseCaseKeyword_10; }
	}
	public class StepsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.deniffel.dsl.useCase.UseCase.Steps");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStepsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStepsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStepsStepParserRuleCall_1_0 = (RuleCall)cStepsAssignment_1.eContents().get(0);
		
		//Steps:
		//	'steps:'
		//	steps+=Step*;
		@Override public ParserRule getRule() { return rule; }
		
		//'steps:' steps+=Step*
		public Group getGroup() { return cGroup; }
		
		//'steps:'
		public Keyword getStepsKeyword_0() { return cStepsKeyword_0; }
		
		//steps+=Step*
		public Assignment getStepsAssignment_1() { return cStepsAssignment_1; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_1_0() { return cStepsStepParserRuleCall_1_0; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.deniffel.dsl.useCase.UseCase.Step");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumberQualifiedNumberParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionSTRINGTerminalRuleCall_1_0 = (RuleCall)cActionAssignment_1.eContents().get(0);
		private final Assignment cErrorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cErrorRaiseErrorParserRuleCall_2_0 = (RuleCall)cErrorAssignment_2.eContents().get(0);
		
		//Step:
		//	number=QualifiedNumber action=STRING error=RaiseError?;
		@Override public ParserRule getRule() { return rule; }
		
		//number=QualifiedNumber action=STRING error=RaiseError?
		public Group getGroup() { return cGroup; }
		
		//number=QualifiedNumber
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//QualifiedNumber
		public RuleCall getNumberQualifiedNumberParserRuleCall_0_0() { return cNumberQualifiedNumberParserRuleCall_0_0; }
		
		//action=STRING
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//STRING
		public RuleCall getActionSTRINGTerminalRuleCall_1_0() { return cActionSTRINGTerminalRuleCall_1_0; }
		
		//error=RaiseError?
		public Assignment getErrorAssignment_2() { return cErrorAssignment_2; }
		
		//RaiseError
		public RuleCall getErrorRaiseErrorParserRuleCall_2_0() { return cErrorRaiseErrorParserRuleCall_2_0; }
	}
	public class RaiseErrorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.deniffel.dsl.useCase.UseCase.RaiseError");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cRaiseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cOnKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cErrorKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cRaiseKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cExceptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExceptionExceptionParserRuleCall_2_0 = (RuleCall)cExceptionAssignment_2.eContents().get(0);
		
		//RaiseError:
		//	'.' ('Raise' | 'On' 'error' 'raise') exception=Exception;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' ('Raise' | 'On' 'error' 'raise') exception=Exception
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//'Raise' | 'On' 'error' 'raise'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'Raise'
		public Keyword getRaiseKeyword_1_0() { return cRaiseKeyword_1_0; }
		
		//'On' 'error' 'raise'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'On'
		public Keyword getOnKeyword_1_1_0() { return cOnKeyword_1_1_0; }
		
		//'error'
		public Keyword getErrorKeyword_1_1_1() { return cErrorKeyword_1_1_1; }
		
		//'raise'
		public Keyword getRaiseKeyword_1_1_2() { return cRaiseKeyword_1_1_2; }
		
		//exception=Exception
		public Assignment getExceptionAssignment_2() { return cExceptionAssignment_2; }
		
		//Exception
		public RuleCall getExceptionExceptionParserRuleCall_2_0() { return cExceptionExceptionParserRuleCall_2_0; }
	}
	public class ExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.deniffel.dsl.useCase.UseCase.Exception");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Exception:
		//	name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}
	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.deniffel.dsl.useCase.UseCase.Description");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Description:
		//	'description:' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'description:' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'description:'
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class NotesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.deniffel.dsl.useCase.UseCase.Notes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cNotesKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cNoteKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentSTRINGTerminalRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		
		//Notes:
		//	('notes:' | 'note:') content=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//('notes:' | 'note:') content=STRING
		public Group getGroup() { return cGroup; }
		
		//'notes:' | 'note:'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'notes:'
		public Keyword getNotesKeyword_0_0() { return cNotesKeyword_0_0; }
		
		//'note:'
		public Keyword getNoteKeyword_0_1() { return cNoteKeyword_0_1; }
		
		//content=STRING
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_1_0() { return cContentSTRINGTerminalRuleCall_1_0; }
	}
	public class InputsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.deniffel.dsl.useCase.UseCase.Inputs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cRequiresKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRequireKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Keyword cRequiresKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Keyword cTheKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Keyword cFollowingKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Keyword cInputKeyword_0_2_3 = (Keyword)cGroup_0_2.eContents().get(3);
		private final Keyword cColonKeyword_0_2_4 = (Keyword)cGroup_0_2.eContents().get(4);
		private final Assignment cInputsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputsInputParserRuleCall_1_0 = (RuleCall)cInputsAssignment_1.eContents().get(0);
		
		//Inputs:
		//	('requires:' | 'require:' | 'requires' 'the' 'following' 'input' ':') inputs+=Input*;
		@Override public ParserRule getRule() { return rule; }
		
		//('requires:' | 'require:' | 'requires' 'the' 'following' 'input' ':') inputs+=Input*
		public Group getGroup() { return cGroup; }
		
		//'requires:' | 'require:' | 'requires' 'the' 'following' 'input' ':'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'requires:'
		public Keyword getRequiresKeyword_0_0() { return cRequiresKeyword_0_0; }
		
		//'require:'
		public Keyword getRequireKeyword_0_1() { return cRequireKeyword_0_1; }
		
		//'requires' 'the' 'following' 'input' ':'
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'requires'
		public Keyword getRequiresKeyword_0_2_0() { return cRequiresKeyword_0_2_0; }
		
		//'the'
		public Keyword getTheKeyword_0_2_1() { return cTheKeyword_0_2_1; }
		
		//'following'
		public Keyword getFollowingKeyword_0_2_2() { return cFollowingKeyword_0_2_2; }
		
		//'input'
		public Keyword getInputKeyword_0_2_3() { return cInputKeyword_0_2_3; }
		
		//':'
		public Keyword getColonKeyword_0_2_4() { return cColonKeyword_0_2_4; }
		
		//inputs+=Input*
		public Assignment getInputsAssignment_1() { return cInputsAssignment_1; }
		
		//Input
		public RuleCall getInputsInputParserRuleCall_1_0() { return cInputsInputParserRuleCall_1_0; }
	}
	public class OutputsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.deniffel.dsl.useCase.UseCase.Outputs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cProducesKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cProduceKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Keyword cProducesKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Keyword cTheKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Keyword cFollowingKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Keyword cOutputKeyword_0_2_3 = (Keyword)cGroup_0_2.eContents().get(3);
		private final Keyword cColonKeyword_0_2_4 = (Keyword)cGroup_0_2.eContents().get(4);
		private final Assignment cOutputsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutputsOutputParserRuleCall_1_0 = (RuleCall)cOutputsAssignment_1.eContents().get(0);
		
		//Outputs:
		//	('produces:' | 'produce:' | 'produces' 'the' 'following' 'output' ':') outputs+=Output*;
		@Override public ParserRule getRule() { return rule; }
		
		//('produces:' | 'produce:' | 'produces' 'the' 'following' 'output' ':') outputs+=Output*
		public Group getGroup() { return cGroup; }
		
		//'produces:' | 'produce:' | 'produces' 'the' 'following' 'output' ':'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'produces:'
		public Keyword getProducesKeyword_0_0() { return cProducesKeyword_0_0; }
		
		//'produce:'
		public Keyword getProduceKeyword_0_1() { return cProduceKeyword_0_1; }
		
		//'produces' 'the' 'following' 'output' ':'
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'produces'
		public Keyword getProducesKeyword_0_2_0() { return cProducesKeyword_0_2_0; }
		
		//'the'
		public Keyword getTheKeyword_0_2_1() { return cTheKeyword_0_2_1; }
		
		//'following'
		public Keyword getFollowingKeyword_0_2_2() { return cFollowingKeyword_0_2_2; }
		
		//'output'
		public Keyword getOutputKeyword_0_2_3() { return cOutputKeyword_0_2_3; }
		
		//':'
		public Keyword getColonKeyword_0_2_4() { return cColonKeyword_0_2_4; }
		
		//outputs+=Output*
		public Assignment getOutputsAssignment_1() { return cOutputsAssignment_1; }
		
		//Output
		public RuleCall getOutputsOutputParserRuleCall_1_0() { return cOutputsOutputParserRuleCall_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.deniffel.dsl.useCase.UseCase.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cImportInfoAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cImportInfoQualifiedNameParserRuleCall_5_1_0 = (RuleCall)cImportInfoAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//Type:
		//	'type' name=ID '(' description=STRING ')' ('[' importInfo=QualifiedName ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'type' name=ID '(' description=STRING ')' ('[' importInfo=QualifiedName ']')?
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//('[' importInfo=QualifiedName ']')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }
		
		//importInfo=QualifiedName
		public Assignment getImportInfoAssignment_5_1() { return cImportInfoAssignment_5_1; }
		
		//QualifiedName
		public RuleCall getImportInfoQualifiedNameParserRuleCall_5_1_0() { return cImportInfoQualifiedNameParserRuleCall_5_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5_2() { return cRightSquareBracketKeyword_5_2; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.deniffel.dsl.useCase.UseCase.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cManyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cManyManyKeyword_0_0 = (Keyword)cManyAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentSTRINGTerminalRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_3_1_0 = (CrossReference)cTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_3_1_0_1 = (RuleCall)cTypeTypeCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cEGKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cExampleAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cExampleSTRINGTerminalRuleCall_4_2_0 = (RuleCall)cExampleAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//Input:
		//	many?='many'? '-' content=STRING ('as' type=[Type])? ('(' 'e.g' example=STRING ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//many?='many'? '-' content=STRING ('as' type=[Type])? ('(' 'e.g' example=STRING ')')?
		public Group getGroup() { return cGroup; }
		
		//many?='many'?
		public Assignment getManyAssignment_0() { return cManyAssignment_0; }
		
		//'many'
		public Keyword getManyManyKeyword_0_0() { return cManyManyKeyword_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//content=STRING
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_2_0() { return cContentSTRINGTerminalRuleCall_2_0; }
		
		//('as' type=[Type])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'as'
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }
		
		//type=[Type]
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//[Type]
		public CrossReference getTypeTypeCrossReference_3_1_0() { return cTypeTypeCrossReference_3_1_0; }
		
		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_3_1_0_1() { return cTypeTypeIDTerminalRuleCall_3_1_0_1; }
		
		//('(' 'e.g' example=STRING ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//'e.g'
		public Keyword getEGKeyword_4_1() { return cEGKeyword_4_1; }
		
		//example=STRING
		public Assignment getExampleAssignment_4_2() { return cExampleAssignment_4_2; }
		
		//STRING
		public RuleCall getExampleSTRINGTerminalRuleCall_4_2_0() { return cExampleSTRINGTerminalRuleCall_4_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.deniffel.dsl.useCase.UseCase.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cManyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cManyManyKeyword_0_0 = (Keyword)cManyAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentSTRINGTerminalRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_3_1_0 = (CrossReference)cTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_3_1_0_1 = (RuleCall)cTypeTypeCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cEGKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cExampleAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cExampleSTRINGTerminalRuleCall_4_2_0 = (RuleCall)cExampleAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//Output:
		//	many?='many'? '-' content=STRING ('as' type=[Type])? ('(' 'e.g' example=STRING ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//many?='many'? '-' content=STRING ('as' type=[Type])? ('(' 'e.g' example=STRING ')')?
		public Group getGroup() { return cGroup; }
		
		//many?='many'?
		public Assignment getManyAssignment_0() { return cManyAssignment_0; }
		
		//'many'
		public Keyword getManyManyKeyword_0_0() { return cManyManyKeyword_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//content=STRING
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_2_0() { return cContentSTRINGTerminalRuleCall_2_0; }
		
		//('as' type=[Type])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'as'
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }
		
		//type=[Type]
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//[Type]
		public CrossReference getTypeTypeCrossReference_3_1_0() { return cTypeTypeCrossReference_3_1_0; }
		
		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_3_1_0_1() { return cTypeTypeIDTerminalRuleCall_3_1_0_1; }
		
		//('(' 'e.g' example=STRING ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//'e.g'
		public Keyword getEGKeyword_4_1() { return cEGKeyword_4_1; }
		
		//example=STRING
		public Assignment getExampleAssignment_4_2() { return cExampleAssignment_4_2; }
		
		//STRING
		public RuleCall getExampleSTRINGTerminalRuleCall_4_2_0() { return cExampleSTRINGTerminalRuleCall_4_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}
	public class AllowedUserGroupsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.deniffel.dsl.useCase.UseCase.AllowedUserGroups");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllowedUsergroupsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGroupsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGroupsAllowedUserGroupParserRuleCall_1_0 = (RuleCall)cGroupsAssignment_1.eContents().get(0);
		
		//AllowedUserGroups:
		//	'allowed-usergroups:'
		//	groups+=AllowedUserGroup*;
		@Override public ParserRule getRule() { return rule; }
		
		//'allowed-usergroups:' groups+=AllowedUserGroup*
		public Group getGroup() { return cGroup; }
		
		//'allowed-usergroups:'
		public Keyword getAllowedUsergroupsKeyword_0() { return cAllowedUsergroupsKeyword_0; }
		
		//groups+=AllowedUserGroup*
		public Assignment getGroupsAssignment_1() { return cGroupsAssignment_1; }
		
		//AllowedUserGroup
		public RuleCall getGroupsAllowedUserGroupParserRuleCall_1_0() { return cGroupsAllowedUserGroupParserRuleCall_1_0; }
	}
	public class AllowedUserGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.deniffel.dsl.useCase.UseCase.AllowedUserGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cManyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cManyManyKeyword_0_0 = (Keyword)cManyAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_3_1_0 = (CrossReference)cTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_3_1_0_1 = (RuleCall)cTypeTypeCrossReference_3_1_0.eContents().get(1);
		
		//AllowedUserGroup:
		//	many?='many'? '-' name=STRING ('as' type=[Type])?;
		@Override public ParserRule getRule() { return rule; }
		
		//many?='many'? '-' name=STRING ('as' type=[Type])?
		public Group getGroup() { return cGroup; }
		
		//many?='many'?
		public Assignment getManyAssignment_0() { return cManyAssignment_0; }
		
		//'many'
		public Keyword getManyManyKeyword_0_0() { return cManyManyKeyword_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//('as' type=[Type])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'as'
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }
		
		//type=[Type]
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//[Type]
		public CrossReference getTypeTypeCrossReference_3_1_0() { return cTypeTypeCrossReference_3_1_0; }
		
		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_3_1_0_1() { return cTypeTypeIDTerminalRuleCall_3_1_0_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.deniffel.dsl.useCase.UseCase.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.deniffel.dsl.useCase.UseCase.QualifiedNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//QualifiedNumber:
		//	INT ('.' INT)* '.';
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT)* '.'
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}
	
	
	private final ModelElements pModel;
	private final UseCaseElements pUseCase;
	private final StepsElements pSteps;
	private final StepElements pStep;
	private final RaiseErrorElements pRaiseError;
	private final ExceptionElements pException;
	private final DescriptionElements pDescription;
	private final NotesElements pNotes;
	private final InputsElements pInputs;
	private final OutputsElements pOutputs;
	private final TypeElements pType;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final AllowedUserGroupsElements pAllowedUserGroups;
	private final AllowedUserGroupElements pAllowedUserGroup;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNumberElements pQualifiedNumber;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UseCaseGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pUseCase = new UseCaseElements();
		this.pSteps = new StepsElements();
		this.pStep = new StepElements();
		this.pRaiseError = new RaiseErrorElements();
		this.pException = new ExceptionElements();
		this.pDescription = new DescriptionElements();
		this.pNotes = new NotesElements();
		this.pInputs = new InputsElements();
		this.pOutputs = new OutputsElements();
		this.pType = new TypeElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pAllowedUserGroups = new AllowedUserGroupsElements();
		this.pAllowedUserGroup = new AllowedUserGroupElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNumber = new QualifiedNumberElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("io.deniffel.dsl.useCase.UseCase".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	types+=Type*
	//	useCases+=UseCase*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//UseCase:
	//	'use-case' name=STRING
	//	descriptions+=Description?
	//	allowedUserGroups+=AllowedUserGroups?
	//	inputs+=Inputs?
	//	outputs+=Outputs?
	//	steps+=Steps?
	//	notes+=Notes?
	//	'end' 'of' 'use-case';
	public UseCaseElements getUseCaseAccess() {
		return pUseCase;
	}
	
	public ParserRule getUseCaseRule() {
		return getUseCaseAccess().getRule();
	}
	
	//Steps:
	//	'steps:'
	//	steps+=Step*;
	public StepsElements getStepsAccess() {
		return pSteps;
	}
	
	public ParserRule getStepsRule() {
		return getStepsAccess().getRule();
	}
	
	//Step:
	//	number=QualifiedNumber action=STRING error=RaiseError?;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//RaiseError:
	//	'.' ('Raise' | 'On' 'error' 'raise') exception=Exception;
	public RaiseErrorElements getRaiseErrorAccess() {
		return pRaiseError;
	}
	
	public ParserRule getRaiseErrorRule() {
		return getRaiseErrorAccess().getRule();
	}
	
	//Exception:
	//	name=STRING;
	public ExceptionElements getExceptionAccess() {
		return pException;
	}
	
	public ParserRule getExceptionRule() {
		return getExceptionAccess().getRule();
	}
	
	//Description:
	//	'description:' name=STRING;
	public DescriptionElements getDescriptionAccess() {
		return pDescription;
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}
	
	//Notes:
	//	('notes:' | 'note:') content=STRING;
	public NotesElements getNotesAccess() {
		return pNotes;
	}
	
	public ParserRule getNotesRule() {
		return getNotesAccess().getRule();
	}
	
	//Inputs:
	//	('requires:' | 'require:' | 'requires' 'the' 'following' 'input' ':') inputs+=Input*;
	public InputsElements getInputsAccess() {
		return pInputs;
	}
	
	public ParserRule getInputsRule() {
		return getInputsAccess().getRule();
	}
	
	//Outputs:
	//	('produces:' | 'produce:' | 'produces' 'the' 'following' 'output' ':') outputs+=Output*;
	public OutputsElements getOutputsAccess() {
		return pOutputs;
	}
	
	public ParserRule getOutputsRule() {
		return getOutputsAccess().getRule();
	}
	
	//Type:
	//	'type' name=ID '(' description=STRING ')' ('[' importInfo=QualifiedName ']')?;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Input:
	//	many?='many'? '-' content=STRING ('as' type=[Type])? ('(' 'e.g' example=STRING ')')?;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output:
	//	many?='many'? '-' content=STRING ('as' type=[Type])? ('(' 'e.g' example=STRING ')')?;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//AllowedUserGroups:
	//	'allowed-usergroups:'
	//	groups+=AllowedUserGroup*;
	public AllowedUserGroupsElements getAllowedUserGroupsAccess() {
		return pAllowedUserGroups;
	}
	
	public ParserRule getAllowedUserGroupsRule() {
		return getAllowedUserGroupsAccess().getRule();
	}
	
	//AllowedUserGroup:
	//	many?='many'? '-' name=STRING ('as' type=[Type])?;
	public AllowedUserGroupElements getAllowedUserGroupAccess() {
		return pAllowedUserGroup;
	}
	
	public ParserRule getAllowedUserGroupRule() {
		return getAllowedUserGroupAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNumber:
	//	INT ('.' INT)* '.';
	public QualifiedNumberElements getQualifiedNumberAccess() {
		return pQualifiedNumber;
	}
	
	public ParserRule getQualifiedNumberRule() {
		return getQualifiedNumberAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
