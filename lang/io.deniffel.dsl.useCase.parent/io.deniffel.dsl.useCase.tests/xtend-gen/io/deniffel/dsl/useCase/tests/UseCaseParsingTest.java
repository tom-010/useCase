/**
 * generated by Xtext 2.13.0
 */
package io.deniffel.dsl.useCase.tests;

import com.google.inject.Inject;
import io.deniffel.dsl.useCase.tests.UseCaseInjectorProvider;
import io.deniffel.dsl.useCase.useCase.UseCase;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(UseCaseInjectorProvider.class)
@SuppressWarnings("all")
public class UseCaseParsingTest {
  @Inject
  private ParseHelper<UseCase> parseHelper;
  
  @Test
  public void useCaseKeywordGenerationWorks() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("use-case createUser");
      _builder.newLine();
      _builder.append("end of use-case");
      _builder.newLine();
      final UseCase result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assert.assertTrue(_builder_1.toString(), errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void useCaseKeyWordWithUnderscore_generatesCamelCaseJavaClassName() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("use-case Create_User");
      _builder.newLine();
      _builder.append("use-case-end");
      _builder.newLine();
      final UseCase model = this.parseHelper.parse(_builder);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
