buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
    }
}

plugins {
	id 'war'
}

apply plugin: 'java'
apply plugin: 'org.junit.platform.gradle.plugin'

dependencies {
    testCompile(
            'org.junit.jupiter:junit-jupiter-api:5.0.1'
    )
    testRuntime(
            'org.junit.jupiter:junit-jupiter-engine:5.0.1',
            'org.junit.vintage:junit-vintage-engine:4.12.1',
            'org.junit.platform:junit-platform-launcher:1.0.1',
            'org.junit.platform:junit-platform-runner:1.0.1'
    )
}

dependencies {
	compile project(':io.deniffel.dsl.useCase')
	compile project(':io.deniffel.dsl.useCase.ide')
	compile "org.eclipse.xtext:org.eclipse.xtext.xbase.web:${xtextVersion}"
	compile "org.eclipse.xtext:org.eclipse.xtext.web.servlet:${xtextVersion}"
	compile "org.eclipse.xtend:org.eclipse.xtend.lib:${xtextVersion}"
	compile "org.webjars:requirejs:2.3.2"
	compile "org.webjars:jquery:2.2.4"
	compile "org.webjars:ace:1.2.3"
	providedCompile "org.eclipse.jetty:jetty-annotations:9.3.8.v20160314"
	providedCompile "org.slf4j:slf4j-simple:1.7.21"
	compile 'junit:junit:5.+'
	testCompile 'junit:junit:5.+'
}
task jettyRun(type:JavaExec) {
	dependsOn(sourceSets.main.runtimeClasspath)
	classpath = sourceSets.main.runtimeClasspath.filter{it.exists()}
	main = 'io.deniffel.dsl.useCase.web.ServerLauncher'
	standardInput = System.in
	group = 'run'
	description = 'Starts an example Jetty server with your language'
}
