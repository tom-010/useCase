/*
 * generated by Xtext 2.13.0
 */
package io.deniffel.dsl.useCase.ide.contentassist.antlr;

import com.google.inject.Inject;
import io.deniffel.dsl.useCase.ide.contentassist.antlr.internal.InternalUseCaseParser;
import io.deniffel.dsl.useCase.services.UseCaseGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class UseCaseParser extends AbstractContentAssistParser {

	@Inject
	private UseCaseGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalUseCaseParser createParser() {
		InternalUseCaseParser result = new InternalUseCaseParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getInputsAccess().getAlternatives_0(), "rule__Inputs__Alternatives_0");
					put(grammarAccess.getOutputsAccess().getAlternatives_0(), "rule__Outputs__Alternatives_0");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getUseCaseAccess().getGroup(), "rule__UseCase__Group__0");
					put(grammarAccess.getDescriptionAccess().getGroup(), "rule__Description__Group__0");
					put(grammarAccess.getInputsAccess().getGroup(), "rule__Inputs__Group__0");
					put(grammarAccess.getOutputsAccess().getGroup(), "rule__Outputs__Group__0");
					put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
					put(grammarAccess.getTypeAccess().getGroup_5(), "rule__Type__Group_5__0");
					put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
					put(grammarAccess.getInputAccess().getGroup_3(), "rule__Input__Group_3__0");
					put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
					put(grammarAccess.getOutputAccess().getGroup_3(), "rule__Output__Group_3__0");
					put(grammarAccess.getAllowedUserGroupsAccess().getGroup(), "rule__AllowedUserGroups__Group__0");
					put(grammarAccess.getAllowedUserGroupAccess().getGroup(), "rule__AllowedUserGroup__Group__0");
					put(grammarAccess.getAllowedUserGroupAccess().getGroup_3(), "rule__AllowedUserGroup__Group_3__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getModelAccess().getTypesAssignment_0(), "rule__Model__TypesAssignment_0");
					put(grammarAccess.getModelAccess().getUseCasesAssignment_1(), "rule__Model__UseCasesAssignment_1");
					put(grammarAccess.getUseCaseAccess().getNameAssignment_1(), "rule__UseCase__NameAssignment_1");
					put(grammarAccess.getUseCaseAccess().getDescriptionsAssignment_2(), "rule__UseCase__DescriptionsAssignment_2");
					put(grammarAccess.getUseCaseAccess().getInputsAssignment_3(), "rule__UseCase__InputsAssignment_3");
					put(grammarAccess.getUseCaseAccess().getOutputsAssignment_4(), "rule__UseCase__OutputsAssignment_4");
					put(grammarAccess.getUseCaseAccess().getAllowedUserGroupsAssignment_5(), "rule__UseCase__AllowedUserGroupsAssignment_5");
					put(grammarAccess.getDescriptionAccess().getNameAssignment_1(), "rule__Description__NameAssignment_1");
					put(grammarAccess.getInputsAccess().getInputsAssignment_1(), "rule__Inputs__InputsAssignment_1");
					put(grammarAccess.getOutputsAccess().getOutputsAssignment_1(), "rule__Outputs__OutputsAssignment_1");
					put(grammarAccess.getTypeAccess().getNameAssignment_1(), "rule__Type__NameAssignment_1");
					put(grammarAccess.getTypeAccess().getDescriptionAssignment_3(), "rule__Type__DescriptionAssignment_3");
					put(grammarAccess.getTypeAccess().getImportInfoAssignment_5_1(), "rule__Type__ImportInfoAssignment_5_1");
					put(grammarAccess.getInputAccess().getManyAssignment_0(), "rule__Input__ManyAssignment_0");
					put(grammarAccess.getInputAccess().getContentAssignment_2(), "rule__Input__ContentAssignment_2");
					put(grammarAccess.getInputAccess().getTypeAssignment_3_1(), "rule__Input__TypeAssignment_3_1");
					put(grammarAccess.getOutputAccess().getManyAssignment_0(), "rule__Output__ManyAssignment_0");
					put(grammarAccess.getOutputAccess().getContentAssignment_2(), "rule__Output__ContentAssignment_2");
					put(grammarAccess.getOutputAccess().getTypeAssignment_3_1(), "rule__Output__TypeAssignment_3_1");
					put(grammarAccess.getAllowedUserGroupsAccess().getGroupsAssignment_1(), "rule__AllowedUserGroups__GroupsAssignment_1");
					put(grammarAccess.getAllowedUserGroupAccess().getManyAssignment_0(), "rule__AllowedUserGroup__ManyAssignment_0");
					put(grammarAccess.getAllowedUserGroupAccess().getNameAssignment_2(), "rule__AllowedUserGroup__NameAssignment_2");
					put(grammarAccess.getAllowedUserGroupAccess().getTypeAssignment_3_1(), "rule__AllowedUserGroup__TypeAssignment_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public UseCaseGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(UseCaseGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
