/*
 * generated by Xtext 2.13.0
 */
package io.deniffel.dsl.useCase.ide.contentassist.antlr;

import com.google.inject.Inject;
import io.deniffel.dsl.useCase.ide.contentassist.antlr.internal.InternalUseCaseParser;
import io.deniffel.dsl.useCase.services.UseCaseGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class UseCaseParser extends AbstractContentAssistParser {

	@Inject
	private UseCaseGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalUseCaseParser createParser() {
		InternalUseCaseParser result = new InternalUseCaseParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives_0(), "rule__Model__Alternatives_0");
					put(grammarAccess.getPackageAccess().getAlternatives_0(), "rule__Package__Alternatives_0");
					put(grammarAccess.getUseCaseAccess().getAlternatives_0(), "rule__UseCase__Alternatives_0");
					put(grammarAccess.getUseCaseAccess().getAlternatives_9(), "rule__UseCase__Alternatives_9");
					put(grammarAccess.getDescriptionAccess().getAlternatives_0(), "rule__Description__Alternatives_0");
					put(grammarAccess.getAllowedUserGroupsAccess().getAlternatives_0(), "rule__AllowedUserGroups__Alternatives_0");
					put(grammarAccess.getInputsAccess().getAlternatives_0(), "rule__Inputs__Alternatives_0");
					put(grammarAccess.getInputsAccess().getAlternatives_0_0(), "rule__Inputs__Alternatives_0_0");
					put(grammarAccess.getInputAccess().getAlternatives_4_0(), "rule__Input__Alternatives_4_0");
					put(grammarAccess.getInputAccess().getAlternatives_5_1(), "rule__Input__Alternatives_5_1");
					put(grammarAccess.getOutputsAccess().getAlternatives_0(), "rule__Outputs__Alternatives_0");
					put(grammarAccess.getOutputsAccess().getAlternatives_0_0(), "rule__Outputs__Alternatives_0_0");
					put(grammarAccess.getOutputAccess().getAlternatives_3_0(), "rule__Output__Alternatives_3_0");
					put(grammarAccess.getOutputAccess().getAlternatives_4_1(), "rule__Output__Alternatives_4_1");
					put(grammarAccess.getPreConditionsAccess().getAlternatives_0(), "rule__PreConditions__Alternatives_0");
					put(grammarAccess.getPreConditionsAccess().getAlternatives_0_0(), "rule__PreConditions__Alternatives_0_0");
					put(grammarAccess.getStepsAccess().getAlternatives_0(), "rule__Steps__Alternatives_0");
					put(grammarAccess.getStepAccess().getAlternatives_1(), "rule__Step__Alternatives_1");
					put(grammarAccess.getRaiseErrorAccess().getAlternatives_0(), "rule__RaiseError__Alternatives_0");
					put(grammarAccess.getRaiseErrorAccess().getAlternatives_0_0_0(), "rule__RaiseError__Alternatives_0_0_0");
					put(grammarAccess.getRaiseErrorAccess().getAlternatives_0_0_1(), "rule__RaiseError__Alternatives_0_0_1");
					put(grammarAccess.getRaiseErrorAccess().getAlternatives_0_1(), "rule__RaiseError__Alternatives_0_1");
					put(grammarAccess.getIfStatementAccess().getAlternatives_0(), "rule__IfStatement__Alternatives_0");
					put(grammarAccess.getLoopAccess().getAlternatives_0(), "rule__Loop__Alternatives_0");
					put(grammarAccess.getNotesAccess().getAlternatives_0(), "rule__Notes__Alternatives_0");
					put(grammarAccess.getNotesAccess().getAlternatives_0_0(), "rule__Notes__Alternatives_0_0");
					put(grammarAccess.getNotesAccess().getAlternatives_0_1(), "rule__Notes__Alternatives_0_1");
					put(grammarAccess.getUsedTypesAccess().getAlternatives_0(), "rule__UsedTypes__Alternatives_0");
					put(grammarAccess.getUsedExceptionsAccess().getAlternatives_0(), "rule__UsedExceptions__Alternatives_0");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNumberAccess().getGroup(), "rule__QualifiedNumber__Group__0");
					put(grammarAccess.getQualifiedNumberAccess().getGroup_1(), "rule__QualifiedNumber__Group_1__0");
					put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
					put(grammarAccess.getPackageAccess().getGroup_2(), "rule__Package__Group_2__0");
					put(grammarAccess.getUseCaseAccess().getGroup(), "rule__UseCase__Group__0");
					put(grammarAccess.getUseCaseAccess().getGroup_9_0(), "rule__UseCase__Group_9_0__0");
					put(grammarAccess.getUseCaseAccess().getGroup_9_1(), "rule__UseCase__Group_9_1__0");
					put(grammarAccess.getDescriptionAccess().getGroup(), "rule__Description__Group__0");
					put(grammarAccess.getAllowedUserGroupsAccess().getGroup(), "rule__AllowedUserGroups__Group__0");
					put(grammarAccess.getAllowedUserGroupsAccess().getGroup_0_1(), "rule__AllowedUserGroups__Group_0_1__0");
					put(grammarAccess.getAllowedUserGroupAccess().getGroup(), "rule__AllowedUserGroup__Group__0");
					put(grammarAccess.getAllowedUserGroupAccess().getGroup_3(), "rule__AllowedUserGroup__Group_3__0");
					put(grammarAccess.getInputsAccess().getGroup(), "rule__Inputs__Group__0");
					put(grammarAccess.getInputsAccess().getGroup_0_0_2(), "rule__Inputs__Group_0_0_2__0");
					put(grammarAccess.getInputsAccess().getGroup_0_1(), "rule__Inputs__Group_0_1__0");
					put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
					put(grammarAccess.getInputAccess().getGroup_4(), "rule__Input__Group_4__0");
					put(grammarAccess.getInputAccess().getGroup_5(), "rule__Input__Group_5__0");
					put(grammarAccess.getOutputsAccess().getGroup(), "rule__Outputs__Group__0");
					put(grammarAccess.getOutputsAccess().getGroup_0_0_2(), "rule__Outputs__Group_0_0_2__0");
					put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
					put(grammarAccess.getOutputAccess().getGroup_3(), "rule__Output__Group_3__0");
					put(grammarAccess.getOutputAccess().getGroup_4(), "rule__Output__Group_4__0");
					put(grammarAccess.getPreConditionsAccess().getGroup(), "rule__PreConditions__Group__0");
					put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
					put(grammarAccess.getStepsAccess().getGroup(), "rule__Steps__Group__0");
					put(grammarAccess.getStepAccess().getGroup(), "rule__Step__Group__0");
					put(grammarAccess.getStepAccess().getGroup_1_0(), "rule__Step__Group_1_0__0");
					put(grammarAccess.getRaiseErrorAccess().getGroup(), "rule__RaiseError__Group__0");
					put(grammarAccess.getRaiseErrorAccess().getGroup_0_0(), "rule__RaiseError__Group_0_0__0");
					put(grammarAccess.getRaiseErrorAccess().getGroup_0_0_1_0(), "rule__RaiseError__Group_0_0_1_0__0");
					put(grammarAccess.getRaiseErrorAccess().getGroup_0_0_1_1(), "rule__RaiseError__Group_0_0_1_1__0");
					put(grammarAccess.getRaiseErrorAccess().getGroup_0_1_0(), "rule__RaiseError__Group_0_1_0__0");
					put(grammarAccess.getRaiseErrorAccess().getGroup_0_1_1(), "rule__RaiseError__Group_0_1_1__0");
					put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
					put(grammarAccess.getLoopAccess().getGroup(), "rule__Loop__Group__0");
					put(grammarAccess.getNotesAccess().getGroup(), "rule__Notes__Group__0");
					put(grammarAccess.getUsedTypesAccess().getGroup(), "rule__UsedTypes__Group__0");
					put(grammarAccess.getUsedTypesAccess().getGroup_0_0(), "rule__UsedTypes__Group_0_0__0");
					put(grammarAccess.getUsedTypesAccess().getGroup_0_1(), "rule__UsedTypes__Group_0_1__0");
					put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
					put(grammarAccess.getTypeAccess().getGroup_5(), "rule__Type__Group_5__0");
					put(grammarAccess.getUsedExceptionsAccess().getGroup(), "rule__UsedExceptions__Group__0");
					put(grammarAccess.getUsedExceptionsAccess().getGroup_0_0(), "rule__UsedExceptions__Group_0_0__0");
					put(grammarAccess.getUsedExceptionsAccess().getGroup_0_1(), "rule__UsedExceptions__Group_0_1__0");
					put(grammarAccess.getExceptionDeclerationAccess().getGroup(), "rule__ExceptionDecleration__Group__0");
					put(grammarAccess.getExceptionDeclerationAccess().getGroup_5(), "rule__ExceptionDecleration__Group_5__0");
					put(grammarAccess.getModelAccess().getCompanyAssignment_1(), "rule__Model__CompanyAssignment_1");
					put(grammarAccess.getModelAccess().getPackageAssignment_2(), "rule__Model__PackageAssignment_2");
					put(grammarAccess.getModelAccess().getUseCasesAssignment_3(), "rule__Model__UseCasesAssignment_3");
					put(grammarAccess.getModelAccess().getTypesAssignment_4(), "rule__Model__TypesAssignment_4");
					put(grammarAccess.getModelAccess().getExceptionsAssignment_5(), "rule__Model__ExceptionsAssignment_5");
					put(grammarAccess.getPackageAccess().getPartsAssignment_1(), "rule__Package__PartsAssignment_1");
					put(grammarAccess.getPackageAccess().getPartsAssignment_2_1(), "rule__Package__PartsAssignment_2_1");
					put(grammarAccess.getPackagePartAccess().getNameAssignment(), "rule__PackagePart__NameAssignment");
					put(grammarAccess.getUseCaseAccess().getNameAssignment_1(), "rule__UseCase__NameAssignment_1");
					put(grammarAccess.getUseCaseAccess().getDescriptionsAssignment_2(), "rule__UseCase__DescriptionsAssignment_2");
					put(grammarAccess.getUseCaseAccess().getAllowedUserGroupsAssignment_3(), "rule__UseCase__AllowedUserGroupsAssignment_3");
					put(grammarAccess.getUseCaseAccess().getInputsAssignment_4(), "rule__UseCase__InputsAssignment_4");
					put(grammarAccess.getUseCaseAccess().getOutputsAssignment_5(), "rule__UseCase__OutputsAssignment_5");
					put(grammarAccess.getUseCaseAccess().getPreconditionsAssignment_6(), "rule__UseCase__PreconditionsAssignment_6");
					put(grammarAccess.getUseCaseAccess().getStepsAssignment_7(), "rule__UseCase__StepsAssignment_7");
					put(grammarAccess.getUseCaseAccess().getNotesAssignment_8(), "rule__UseCase__NotesAssignment_8");
					put(grammarAccess.getDescriptionAccess().getNameAssignment_1(), "rule__Description__NameAssignment_1");
					put(grammarAccess.getAllowedUserGroupsAccess().getGroupsAssignment_1(), "rule__AllowedUserGroups__GroupsAssignment_1");
					put(grammarAccess.getAllowedUserGroupAccess().getManyAssignment_0(), "rule__AllowedUserGroup__ManyAssignment_0");
					put(grammarAccess.getAllowedUserGroupAccess().getNameAssignment_2(), "rule__AllowedUserGroup__NameAssignment_2");
					put(grammarAccess.getAllowedUserGroupAccess().getTypeAssignment_3_1(), "rule__AllowedUserGroup__TypeAssignment_3_1");
					put(grammarAccess.getInputsAccess().getInputsAssignment_1(), "rule__Inputs__InputsAssignment_1");
					put(grammarAccess.getInputAccess().getManyAssignment_0(), "rule__Input__ManyAssignment_0");
					put(grammarAccess.getInputAccess().getOptionalAssignment_2(), "rule__Input__OptionalAssignment_2");
					put(grammarAccess.getInputAccess().getContentAssignment_3(), "rule__Input__ContentAssignment_3");
					put(grammarAccess.getInputAccess().getTypeAssignment_4_1(), "rule__Input__TypeAssignment_4_1");
					put(grammarAccess.getInputAccess().getExampleAssignment_5_2(), "rule__Input__ExampleAssignment_5_2");
					put(grammarAccess.getOutputsAccess().getOutputsAssignment_1(), "rule__Outputs__OutputsAssignment_1");
					put(grammarAccess.getOutputAccess().getManyAssignment_0(), "rule__Output__ManyAssignment_0");
					put(grammarAccess.getOutputAccess().getContentAssignment_2(), "rule__Output__ContentAssignment_2");
					put(grammarAccess.getOutputAccess().getTypeAssignment_3_1(), "rule__Output__TypeAssignment_3_1");
					put(grammarAccess.getOutputAccess().getExampleAssignment_4_2(), "rule__Output__ExampleAssignment_4_2");
					put(grammarAccess.getPreConditionsAccess().getConditionsAssignment_1(), "rule__PreConditions__ConditionsAssignment_1");
					put(grammarAccess.getConditionAccess().getContentAssignment_1(), "rule__Condition__ContentAssignment_1");
					put(grammarAccess.getStepsAccess().getStepsAssignment_1(), "rule__Steps__StepsAssignment_1");
					put(grammarAccess.getStepAccess().getNumberAssignment_0(), "rule__Step__NumberAssignment_0");
					put(grammarAccess.getStepAccess().getActionAssignment_1_0_0(), "rule__Step__ActionAssignment_1_0_0");
					put(grammarAccess.getStepAccess().getErrorAssignment_1_0_1(), "rule__Step__ErrorAssignment_1_0_1");
					put(grammarAccess.getStepAccess().getErrorAssignment_1_1(), "rule__Step__ErrorAssignment_1_1");
					put(grammarAccess.getStepAccess().getConditionAssignment_1_2(), "rule__Step__ConditionAssignment_1_2");
					put(grammarAccess.getStepAccess().getLoopAssignment_1_3(), "rule__Step__LoopAssignment_1_3");
					put(grammarAccess.getRaiseErrorAccess().getExceptionAssignment_1(), "rule__RaiseError__ExceptionAssignment_1");
					put(grammarAccess.getIfStatementAccess().getConditionAssignment_1(), "rule__IfStatement__ConditionAssignment_1");
					put(grammarAccess.getLoopAccess().getConditionAssignment_1(), "rule__Loop__ConditionAssignment_1");
					put(grammarAccess.getNotesAccess().getContentAssignment_1(), "rule__Notes__ContentAssignment_1");
					put(grammarAccess.getUsedTypesAccess().getTypesAssignment_1(), "rule__UsedTypes__TypesAssignment_1");
					put(grammarAccess.getTypeAccess().getNameAssignment_1(), "rule__Type__NameAssignment_1");
					put(grammarAccess.getTypeAccess().getDescriptionAssignment_3(), "rule__Type__DescriptionAssignment_3");
					put(grammarAccess.getTypeAccess().getImportInfoAssignment_5_1(), "rule__Type__ImportInfoAssignment_5_1");
					put(grammarAccess.getUsedExceptionsAccess().getExceptionsAssignment_1(), "rule__UsedExceptions__ExceptionsAssignment_1");
					put(grammarAccess.getExceptionAccess().getTypeAssignment(), "rule__Exception__TypeAssignment");
					put(grammarAccess.getExceptionDeclerationAccess().getNameAssignment_1(), "rule__ExceptionDecleration__NameAssignment_1");
					put(grammarAccess.getExceptionDeclerationAccess().getMessageAssignment_3(), "rule__ExceptionDecleration__MessageAssignment_3");
					put(grammarAccess.getExceptionDeclerationAccess().getImportInfoAssignment_5_1(), "rule__ExceptionDecleration__ImportInfoAssignment_5_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public UseCaseGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(UseCaseGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
