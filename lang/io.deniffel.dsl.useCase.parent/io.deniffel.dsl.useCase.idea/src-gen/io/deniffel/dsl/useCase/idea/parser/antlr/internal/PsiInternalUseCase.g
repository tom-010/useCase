/*
 * generated by Xtext 2.13.0
 */
grammar PsiInternalUseCase;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package io.deniffel.dsl.useCase.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package io.deniffel.dsl.useCase.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import io.deniffel.dsl.useCase.idea.lang.UseCaseElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import io.deniffel.dsl.useCase.services.UseCaseGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected UseCaseGrammarAccess grammarAccess;

	protected UseCaseElementTypeProvider elementTypeProvider;

	public PsiInternalUseCaseParser(PsiBuilder builder, TokenStream input, UseCaseElementTypeProvider elementTypeProvider, UseCaseGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
		this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "UseCase";
	}

}

//Entry rule entryRuleUseCase
entryRuleUseCase returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getUseCaseElementType()); }
	iv_ruleUseCase=ruleUseCase
	{ $current=$iv_ruleUseCase.current; }
	EOF;

// Rule UseCase
ruleUseCase returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getUseCase_UseCaseKeyword_0ElementType());
		}
		otherlv_0='use-case'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getUseCase_NameSTRINGTerminalRuleCall_1_0ElementType());
				}
				lv_name_1_0=RULE_STRING
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_1_0);
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getUseCase_DescriptionsDescriptionParserRuleCall_2_0ElementType());
				}
				lv_descriptions_2_0=ruleDescription
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
		(
			(
				{
					markComposite(elementTypeProvider.getUseCase_SectionsAttributesParserRuleCall_3_0ElementType());
				}
				lv_sections_3_0=ruleAttributes
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
		{
			markLeaf(elementTypeProvider.getUseCase_EndKeyword_4ElementType());
		}
		otherlv_4='end'
		{
			doneLeaf(otherlv_4);
		}
		{
			markLeaf(elementTypeProvider.getUseCase_OfKeyword_5ElementType());
		}
		otherlv_5='of'
		{
			doneLeaf(otherlv_5);
		}
		{
			markLeaf(elementTypeProvider.getUseCase_UseCaseKeyword_6ElementType());
		}
		otherlv_6='use-case'
		{
			doneLeaf(otherlv_6);
		}
	)
;

//Entry rule entryRuleDescription
entryRuleDescription returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getDescriptionElementType()); }
	iv_ruleDescription=ruleDescription
	{ $current=$iv_ruleDescription.current; }
	EOF;

// Rule Description
ruleDescription returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getDescription_DescriptionKeyword_0ElementType());
		}
		otherlv_0='description:'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getDescription_NameSTRINGTerminalRuleCall_1_0ElementType());
				}
				lv_name_1_0=RULE_STRING
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_1_0);
				}
			)
		)
	)
;

//Entry rule entryRuleAttributes
entryRuleAttributes returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getAttributesElementType()); }
	iv_ruleAttributes=ruleAttributes
	{ $current=$iv_ruleAttributes.current; }
	EOF;

// Rule Attributes
ruleAttributes returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getAttributes_AttributesKeyword_0ElementType());
		}
		otherlv_0='attributes:'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getAttributes_NameSTRINGTerminalRuleCall_1_0ElementType());
				}
				lv_name_1_0=RULE_STRING
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_1_0);
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
